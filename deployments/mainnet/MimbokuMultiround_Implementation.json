{
  "address": "0x72605492f013408eadA534D6E41262A7D2c38321",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ipId",
          "type": "address"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CORE_METADATA_MODULE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IP_ASSET_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LICENSING_MODULE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MULTIROUND_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PIL_TEMPLATE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multiRoundContract",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "ipIds",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "licenseTermsIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct IMimbokuMultiround.RootNFT",
              "name": "rootNFT",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "pilTemplate",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ipAssetRegistry",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "coreMetadataModule",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "licenseModule",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "ipMetadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "ipMetadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMimbokuMultiround.IPMetadata",
          "name": "ipMetadata",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ipMetadataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ipMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMintedTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "internalType": "struct IOKXMultiMint.MintParams",
          "name": "mintparams",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ipId",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        }
      ],
      "name": "mintRecord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "preMint",
      "outputs": [
        {
          "internalType": "address",
          "name": "ipId",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preMintedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setActiveSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multiRoundContract",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "setPreMintedCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer_",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "enableSig",
          "type": "bool"
        }
      ],
      "name": "setStageEnableSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "maxSupply_",
          "type": "uint32"
        }
      ],
      "name": "setStageMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enableSig",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "limitationForAddress",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "maxSupplyForStage",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payeeAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "allowListMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "stage",
              "type": "string"
            },
            {
              "internalType": "enum IOKXMultiMint.MintType",
              "name": "mintType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IOKXMultiMint.StageMintInfo",
          "name": "stageMintInfo",
          "type": "tuple"
        }
      ],
      "name": "setStageMintInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "mintLimitationPerAddress",
          "type": "uint8"
        }
      ],
      "name": "setStageMintLimitationPerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        }
      ],
      "name": "setStageMintTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "payeeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "price",
          "type": "uint64"
        }
      ],
      "name": "setStagePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isTransferRestricted_",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        }
      ],
      "name": "setTransferRestricted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        }
      ],
      "name": "stageToMint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enableSig",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "limitationForAddress",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "maxSupplyForStage",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payeeAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "allowListMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "stage",
              "type": "string"
            },
            {
              "internalType": "enum IOKXMultiMint.MintType",
              "name": "mintType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IOKXMultiMint.StageMintInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "stage",
          "type": "string"
        }
      ],
      "name": "stageToTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2220d72952e8fc80803d8d9ef92dadc30dad0e94a1dbf07fdfad2f52e25b1d8",
  "receipt": {
    "to": null,
    "from": "0x3a2D49d9282227a653c1A92b13E9742ad65Bba54",
    "contractAddress": "0x72605492f013408eadA534D6E41262A7D2c38321",
    "transactionIndex": 0,
    "gasUsed": "5350002",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000c00000000000000000000000080000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x67b51109d874e8e946d874f8a0f48af61fdfe70c0ca6ef06223b22adaac3d0e9",
    "transactionHash": "0xc2220d72952e8fc80803d8d9ef92dadc30dad0e94a1dbf07fdfad2f52e25b1d8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 788066,
        "transactionHash": "0xc2220d72952e8fc80803d8d9ef92dadc30dad0e94a1dbf07fdfad2f52e25b1d8",
        "address": "0x72605492f013408eadA534D6E41262A7D2c38321",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x67b51109d874e8e946d874f8a0f48af61fdfe70c0ca6ef06223b22adaac3d0e9"
      }
    ],
    "blockNumber": 788066,
    "cumulativeGasUsed": "5350002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5b2b125c77a4e8b2ac3354b92d876d4b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ipId\",\"type\":\"address\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE_METADATA_MODULE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IP_ASSET_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LICENSING_MODULE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIROUND_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PIL_TEMPLATE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multiRoundContract\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"ipIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"licenseTermsIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IMimbokuMultiround.RootNFT\",\"name\":\"rootNFT\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pilTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ipAssetRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coreMetadataModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseModule\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipMetadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"ipMetadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMimbokuMultiround.IPMetadata\",\"name\":\"ipMetadata\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipMetadataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct IOKXMultiMint.MintParams\",\"name\":\"mintparams\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ipId\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"}],\"name\":\"mintRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"preMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ipId\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setActiveSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multiRoundContract\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setPreMintedCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enableSig\",\"type\":\"bool\"}],\"name\":\"setStageEnableSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply_\",\"type\":\"uint32\"}],\"name\":\"setStageMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableSig\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"limitationForAddress\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxSupplyForStage\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"allowListMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"enum IOKXMultiMint.MintType\",\"name\":\"mintType\",\"type\":\"uint8\"}],\"internalType\":\"struct IOKXMultiMint.StageMintInfo\",\"name\":\"stageMintInfo\",\"type\":\"tuple\"}],\"name\":\"setStageMintInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"mintLimitationPerAddress\",\"type\":\"uint8\"}],\"name\":\"setStageMintLimitationPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"setStageMintTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"setStagePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTransferRestricted_\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"setTransferRestricted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"}],\"name\":\"stageToMint\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableSig\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"limitationForAddress\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxSupplyForStage\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"allowListMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"},{\"internalType\":\"enum IOKXMultiMint.MintType\",\"name\":\"mintType\",\"type\":\"uint8\"}],\"internalType\":\"struct IOKXMultiMint.StageMintInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stage\",\"type\":\"string\"}],\"name\":\"stageToTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NFTMinted(address,uint256,address)\":{\"params\":{\"ipId\":\"The ID of the NFT IP.\",\"recipient\":\"The address of the recipient of the NFT.\",\"tokenId\":\"The token ID of the minted NFT.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mint(string,bytes,bytes32[],(uint256,uint256,uint256,uint256,address))\":{\"params\":{\"mintparams\":\"The mint parameter signer sign the caller's address (msg.sender) for this `mint` function.\",\"proof\":\"The proof for the leaf of the allowlist in a stage if mint type is Allowlist.\",\"signature\":\"The signature from the whitelist signer. This signautre is genreated by having the whitelist\",\"stage\":\"Identification of the stage\"},\"returns\":{\"ipId\":\"The ID of the NFT IP.\",\"tokenId\":\"The token ID of the minted NFT.\"}},\"mintRecord(address,string)\":{\"params\":{\"stage\":\"The stage name\",\"to\":\"Inquiry address\"}},\"preMint(address,uint256)\":{\"params\":{\"to\":\"The recipient of the minted NFT.\",\"tokenId_\":\"The token ID of the minted NFT.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setActiveSigner(address,bool)\":{\"params\":{\"signer\":\"Signer address.\",\"status\":\"Effective status.\"}},\"setContracts(address,address)\":{\"params\":{\"multiRoundContract\":\"The new MultiRound contract address.\",\"nftContract\":\"The new NFT contract address.\"}},\"setMaxSupply(uint256)\":{\"params\":{\"newMaxSupply\":\"The new maximum number of nfts that can be minted.\"}},\"setPreMintedCount(uint256)\":{\"params\":{\"count\":\"The number of pre-minted NFTs\"}},\"setSigner(address)\":{\"params\":{\"signer_\":\"The new whitelist signer address.\"}},\"setStageEnableSig(string,bool)\":{\"params\":{\"enableSig\":\"Whether to enable (true, false).\",\"stage\":\"Round identification.\"}},\"setStageMaxSupply(string,uint32)\":{\"params\":{\"maxSupply_\":\"nft maximum supply.\",\"stage\":\"Round identification.\"}},\"setStageMintInfo((bool,uint8,uint32,uint64,uint64,uint256,address,address,bytes32,string,uint8))\":{\"params\":{\"stageMintInfo\":\"The mint information for the stage.\"}},\"setStageMintLimitationPerAddress(string,uint8)\":{\"params\":{\"mintLimitationPerAddress\":\"Single address mint limit.\",\"stage\":\"Round identification.\"}},\"setStageMintTime(string,uint64,uint64)\":{\"params\":{\"endTime\":\"The end time of the stage.\",\"stage\":\"Round identification.\",\"startTime\":\"The start time of the stage.\"}},\"setStagePayment(string,address,address,uint64)\":{\"params\":{\"payeeAddress\":\"Payment address.\",\"paymentToken\":\"Token contract address for payment (if 0, it is a native token).\",\"price\":\"Single nft price.\",\"stage\":\"Round identification.\"}},\"setTransferRestricted(bool,uint64,uint64)\":{\"params\":{\"endTime\":\"End time.\",\"isTransferRestricted_\":\"Whether to restrict transfer.\",\"startTime\":\"Start time.\"}},\"stageToMint(string)\":{\"params\":{\"stage\":\"The stage name\"}},\"stageToTotalSupply(string)\":{\"params\":{\"stage\":\"The stage name\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NFTMinted(address,uint256,address)\":{\"notice\":\"Emitted when a NFT is minted.\"}},\"kind\":\"user\",\"methods\":{\"CORE_METADATA_MODULE()\":{\"notice\":\"The Core Metadata Module contract address.\"},\"IP_ASSET_REGISTRY()\":{\"notice\":\"The IP Asset Registry contract address.\"},\"LICENSING_MODULE()\":{\"notice\":\"The Licensing Module contract address.\"},\"MULTIROUND_CONTRACT()\":{\"notice\":\"We need a MultiRound contract to manage rounds\"},\"NFT_CONTRACT()\":{\"notice\":\"We need a NFT contract to mint NFTs\"},\"PIL_TEMPLATE()\":{\"notice\":\"Story Proof-of-Creativity PILicense Template address.\"},\"ipMetadataURI()\":{\"notice\":\"IP information\"},\"lastMintedTokenId()\":{\"notice\":\"Last minted token ID\"},\"maxSupply()\":{\"notice\":\"Query the maximum number of nfts that can be minted\"},\"mint(string,bytes,bytes32[],(uint256,uint256,uint256,uint256,address))\":{\"notice\":\"Mints a NFT for the given recipient, registers it as an IP,         and makes it a derivative of the organization IP.\"},\"mintRecord(address,string)\":{\"notice\":\"Query the quantity that has been minted at a certain stage at a certain address\"},\"preMint(address,uint256)\":{\"notice\":\"Pre-Mints a NFT with specified tokenID for the given recipient, registers it as an IP,         and makes it a derivative of the organization IP.\"},\"preMintedCount()\":{\"notice\":\"Number of pre-minted NFTs\"},\"rootNFT()\":{\"notice\":\"Root NFT\"},\"setActiveSigner(address,bool)\":{\"notice\":\"Set a valid signer address.     If the address has been configured, it is a modify function.abi     If the address has not been configured, then it is and add function to configure the address.\"},\"setContracts(address,address)\":{\"notice\":\"Updates the MULTIROUND_CONTRACT and the NFT_CONTRACT addresses.\"},\"setMaxSupply(uint256)\":{\"notice\":\"Configure or update the maximum number of nfts that can be minted.\"},\"setPreMintedCount(uint256)\":{\"notice\":\"Set number of pre-minted NFTs\"},\"setSigner(address)\":{\"notice\":\"Updates the whitelist signer.\"},\"setStageEnableSig(string,bool)\":{\"notice\":\"Set whether server level signing is enabled for a specific round according to the stage\"},\"setStageMaxSupply(string,uint32)\":{\"notice\":\"According to the stage, set the maximum nft supply for a specific round.\"},\"setStageMintInfo((bool,uint8,uint32,uint64,uint64,uint256,address,address,bytes32,string,uint8))\":{\"notice\":\"Configure or update the information of a certain round according to the stage\"},\"setStageMintLimitationPerAddress(string,uint8)\":{\"notice\":\"Set the upper limit of the number of mints per address for a specific round according to the stage\"},\"setStageMintTime(string,uint64,uint64)\":{\"notice\":\"Configure or update the mint time for a specific stage.\"},\"setStagePayment(string,address,address,uint64)\":{\"notice\":\"Set payment information for a specific round based on the stage\"},\"setTransferRestricted(bool,uint64,uint64)\":{\"notice\":\"Set whether to restrict transfer, if configured to true, transfer is not allowed.     Otherwise, transfer is allowed.\"},\"stageToMint(string)\":{\"notice\":\"Query configuration information for a specific stage\"},\"stageToTotalSupply(string)\":{\"notice\":\"Query the total number of minted under the current stage\"},\"totalSupply()\":{\"notice\":\"Query the total mint quantity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MimbokuMultiround.sol\":\"MimbokuMultiround\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a618cd9a1eea21201ec2ed8484080ca6225215e8883723bef34b9dcf22aa3b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"@story-protocol/protocol-core/contracts/interfaces/modules/base/IModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @notice Module Interface\\ninterface IModule is IERC165 {\\n    /// @notice Returns the string identifier associated with the module.\\n    function name() external returns (string memory);\\n}\\n\",\"keccak256\":\"0xe6b5a6812eeaf90aab7c016aaa8d3efdccedc95059badc40cca5eb23f0f16c50\",\"license\":\"BUSL-1.1\"},\"@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport { IModule } from \\\"../base/IModule.sol\\\";\\nimport { Licensing } from \\\"../../../lib/Licensing.sol\\\";\\n\\n/// @title ILicensingModule\\n/// @notice This interface defines the entry point for users to manage licenses in the Story Protocol.\\n/// It defines the workflow of license actions and coordinates among all license components and dependent components,\\n/// like RoyaltyModule.\\n/// The Licensing Module is responsible for attaching license terms to an IP, minting license tokens,\\n/// and registering derivatives.\\ninterface ILicensingModule is IModule {\\n    /// @notice Emitted when new license terms are attached to an IP.\\n    /// @param caller The address of the caller.\\n    /// @param ipId The IP ID.\\n    /// @param licenseTemplate The address of the license template.\\n    /// @param licenseTermsId The ID of the license terms in the license template.\\n    event LicenseTermsAttached(\\n        address indexed caller,\\n        address indexed ipId,\\n        address licenseTemplate,\\n        uint256 licenseTermsId\\n    );\\n\\n    /// @notice Emitted when license tokens are minted.\\n    /// @param caller The address of the caller.\\n    /// @param licensorIpId The parent IP ID.\\n    /// @param licenseTemplate The address of the license template.\\n    /// @param licenseTermsId The ID of the license terms.\\n    /// @param amount The amount of license tokens minted.\\n    /// @param receiver The address of the receiver.\\n    /// @param startLicenseTokenId The start ID of the minted license tokens.\\n    event LicenseTokensMinted(\\n        address indexed caller,\\n        address indexed licensorIpId,\\n        address licenseTemplate,\\n        uint256 indexed licenseTermsId,\\n        uint256 amount,\\n        address receiver,\\n        uint256 startLicenseTokenId\\n    );\\n\\n    /// @notice Emitted when a derivative IP is registered.\\n    /// @param caller The address of the caller.\\n    /// @param childIpId The derivative IP ID.\\n    /// @param licenseTokenIds The IDs of the license tokens.\\n    /// @param parentIpIds The parent IP IDs.\\n    /// @param licenseTermsIds The IDs of the license terms.\\n    /// @param licenseTemplate The address of the license template.\\n    event DerivativeRegistered(\\n        address indexed caller,\\n        address indexed childIpId,\\n        uint256[] licenseTokenIds,\\n        address[] parentIpIds,\\n        uint256[] licenseTermsIds,\\n        address licenseTemplate\\n    );\\n\\n    /// @notice Attaches default license terms to an IP.\\n    /// the function must be called by the IP owner or an authorized operator.\\n    /// @param ipId The IP ID.\\n    function attachDefaultLicenseTerms(address ipId) external;\\n\\n    /// @notice Attaches license terms to an IP.\\n    /// the function must be called by the IP owner or an authorized operator.\\n    /// @param ipId The IP ID.\\n    /// @param licenseTemplate The address of the license template.\\n    /// @param licenseTermsId The ID of the license terms.\\n    function attachLicenseTerms(address ipId, address licenseTemplate, uint256 licenseTermsId) external;\\n\\n    /// @notice Mints license tokens for the license terms attached to an IP.\\n    /// The license tokens are minted to the receiver.\\n    /// The license terms must be attached to the IP before calling this function.\\n    /// But it can mint license token of default license terms without attaching the default license terms,\\n    /// since it is attached to all IPs by default.\\n    /// IP owners can mint license tokens for their IPs for arbitrary license terms\\n    /// without attaching the license terms to IP.\\n    /// It might require the caller pay the minting fee, depending on the license terms or configured by the iP owner.\\n    /// The minting fee is paid in the minting fee token specified in the license terms or configured by the IP owner.\\n    /// IP owners can configure the minting fee of their IPs or\\n    /// configure the minting fee module to determine the minting fee.\\n    /// IP owners can configure the receiver check module to determine the receiver of the minted license tokens.\\n    /// @param licensorIpId The licensor IP ID.\\n    /// @param licenseTemplate The address of the license template.\\n    /// @param licenseTermsId The ID of the license terms within the license template.\\n    /// @param amount The amount of license tokens to mint.\\n    /// @param receiver The address of the receiver.\\n    /// @param royaltyContext The context of the royalty.\\n    /// @param maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.\\n    /// @param maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens.\\n    /// @return startLicenseTokenId The start ID of the minted license tokens.\\n    function mintLicenseTokens(\\n        address licensorIpId,\\n        address licenseTemplate,\\n        uint256 licenseTermsId,\\n        uint256 amount,\\n        address receiver,\\n        bytes calldata royaltyContext,\\n        uint256 maxMintingFee,\\n        uint32 maxRevenueShare\\n    ) external returns (uint256 startLicenseTokenId);\\n\\n    /// @notice Registers a derivative directly with parent IP's license terms, without needing license tokens,\\n    /// and attaches the license terms of the parent IPs to the derivative IP.\\n    /// The license terms must be attached to the parent IP before calling this function.\\n    /// All IPs attached default license terms by default.\\n    /// The derivative IP owner must be the caller or an authorized operator.\\n    /// @param childIpId The derivative IP ID.\\n    /// @param parentIpIds The parent IP IDs.\\n    /// @param licenseTermsIds The IDs of the license terms that the parent IP supports.\\n    /// @param licenseTemplate The address of the license template of the license terms Ids.\\n    /// @param royaltyContext The context of the royalty.\\n    /// @param maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.\\n    /// @param maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies.\\n    /// @param maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens.\\n    function registerDerivative(\\n        address childIpId,\\n        address[] calldata parentIpIds,\\n        uint256[] calldata licenseTermsIds,\\n        address licenseTemplate,\\n        bytes calldata royaltyContext,\\n        uint256 maxMintingFee,\\n        uint32 maxRts,\\n        uint32 maxRevenueShare\\n    ) external;\\n\\n    /// @notice Registers a derivative with license tokens.\\n    /// the derivative IP is registered with license tokens minted from the parent IP's license terms.\\n    /// the license terms of the parent IPs issued with license tokens are attached to the derivative IP.\\n    /// the caller must be the derivative IP owner or an authorized operator.\\n    /// @param childIpId The derivative IP ID.\\n    /// @param licenseTokenIds The IDs of the license tokens.\\n    /// @param royaltyContext The context of the royalty.\\n    /// @param maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies.\\n    function registerDerivativeWithLicenseTokens(\\n        address childIpId,\\n        uint256[] calldata licenseTokenIds,\\n        bytes calldata royaltyContext,\\n        uint32 maxRts\\n    ) external;\\n\\n    /// @notice Sets the licensing configuration for a specific license terms of an IP.\\n    /// If both licenseTemplate and licenseTermsId are not specified then the licensing config apply\\n    /// to all licenses of given IP.\\n    /// @param ipId The address of the IP for which the configuration is being set.\\n    /// @param licenseTemplate The address of the license template used.\\n    /// If not specified, the configuration applies to all licenses.\\n    /// @param licenseTermsId The ID of the license terms within the license template.\\n    /// If not specified, the configuration applies to all licenses.\\n    /// @param licensingConfig The licensing configuration for the license.\\n    function setLicensingConfig(\\n        address ipId,\\n        address licenseTemplate,\\n        uint256 licenseTermsId,\\n        Licensing.LicensingConfig memory licensingConfig\\n    ) external;\\n\\n    /// @notice pre-compute the minting license fee for the given IP and license terms.\\n    /// the function can be used to calculate the minting license fee before minting license tokens.\\n    /// @param licensorIpId The IP ID of the licensor.\\n    /// @param licenseTemplate The address of the license template.\\n    /// @param licenseTermsId The ID of the license terms.\\n    /// @param amount The amount of license tokens to mint.\\n    /// @param receiver The address of the receiver.\\n    /// @param royaltyContext The context of the royalty.\\n    /// @return currencyToken The address of the ERC20 token used for minting license fee.\\n    /// @return tokenAmount The amount of the currency token to be paid for minting license tokens.\\n    function predictMintingLicenseFee(\\n        address licensorIpId,\\n        address licenseTemplate,\\n        uint256 licenseTermsId,\\n        uint256 amount,\\n        address receiver,\\n        bytes calldata royaltyContext\\n    ) external view returns (address currencyToken, uint256 tokenAmount);\\n}\\n\",\"keccak256\":\"0xa9265ccd6e80573ad44efb5297595c32fbd87889545418c5b8e1afacc69af04f\",\"license\":\"BUSL-1.1\"},\"@story-protocol/protocol-core/contracts/interfaces/modules/metadata/ICoreMetadataModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport { IModule } from \\\"../../../../contracts/interfaces/modules/base/IModule.sol\\\";\\n\\n/// @title CoreMetadataModule\\n/// @notice Manages the core metadata for IP assets within the Story Protocol.\\n/// @dev This contract allows setting and updating core metadata attributes for IP assets.\\ninterface ICoreMetadataModule is IModule {\\n    /// @notice Emitted when the nftTokenURI for an IP asset is set.\\n    event NFTTokenURISet(address indexed ipId, string nftTokenURI, bytes32 nftMetadataHash);\\n\\n    /// @notice Emitted when the metadataURI for an IP asset is set.\\n    event MetadataURISet(address indexed ipId, string metadataURI, bytes32 metadataHash);\\n\\n    /// @notice Emitted when all metadata for an IP asset are frozen.\\n    event MetadataFrozen(address indexed ipId);\\n\\n    /// @notice Update the nftTokenURI for an IP asset,\\n    /// by retrieve the latest TokenURI from IP NFT to which the IP Asset bound.\\n    /// @dev Will revert if IP asset's metadata is frozen.\\n    /// @param ipId The address of the IP asset.\\n    /// @param nftMetadataHash A bytes32 hash representing the metadata of the NFT.\\n    /// This metadata is associated with the IP Asset and is accessible via the NFT's TokenURI.\\n    /// Use bytes32(0) to indicate that the metadata is not available.\\n    function updateNftTokenURI(address ipId, bytes32 nftMetadataHash) external;\\n\\n    /// @notice Sets the metadataURI for an IP asset.\\n    /// @dev Will revert if IP asset's metadata is frozen.\\n    /// @param ipId The address of the IP asset.\\n    /// @param metadataURI The metadataURI to set for the IP asset.\\n    /// @param metadataHash The hash of metadata at metadataURI.\\n    /// Use bytes32(0) to indicate that the metadata is not available.\\n    function setMetadataURI(address ipId, string memory metadataURI, bytes32 metadataHash) external;\\n\\n    /// @notice Sets all core metadata for an IP asset.\\n    /// @dev Will revert if IP asset's metadata is frozen.\\n    /// @param ipId The address of the IP asset.\\n    /// @param metadataURI The metadataURI to set for the IP asset.\\n    /// @param metadataHash The hash of metadata at metadataURI.\\n    /// Use bytes32(0) to indicate that the metadata is not available.\\n    /// @param nftMetadataHash A bytes32 hash representing the metadata of the NFT.\\n    /// This metadata is associated with the IP Asset and is accessible via the NFT's TokenURI.\\n    /// Use bytes32(0) to indicate that the metadata is not available.\\n    function setAll(address ipId, string memory metadataURI, bytes32 metadataHash, bytes32 nftMetadataHash) external;\\n\\n    /// @notice make all metadata of the IP Asset immutable.\\n    /// @param ipId The address of the IP asset.\\n    function freezeMetadata(address ipId) external;\\n\\n    /// @notice Check if the metadata of the IP Asset is immutable.\\n    /// @param ipId The address of the IP asset.\\n    function isMetadataFrozen(address ipId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4eb25795179c8f1391ce1b2886bb571b305aab0ea10078f5c9256bfa8f80c5f0\",\"license\":\"BUSL-1.1\"},\"@story-protocol/protocol-core/contracts/interfaces/registries/IIPAccountRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n/// @title Interface for IP Account Registry\\n/// @notice This interface manages the registration and tracking of IP Accounts\\ninterface IIPAccountRegistry {\\n    /// @notice Event emitted when a new IP Account is created\\n    /// @param account The address of the new IP Account\\n    /// @param implementation The address of the IP Account implementation\\n    /// @param chainId The chain ID where the token contract was deployed\\n    /// @param tokenContract The address of the token contract associated with the IP Account\\n    /// @param tokenId The ID of the token associated with the IP Account\\n    event IPAccountRegistered(\\n        address indexed account,\\n        address indexed implementation,\\n        uint256 indexed chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    );\\n\\n    /// @notice Returns the IPAccount address for the given NFT token.\\n    /// @param chainId The chain ID where the IP Account is located\\n    /// @param tokenContract The address of the token contract associated with the IP Account\\n    /// @param tokenId The ID of the token associated with the IP Account\\n    /// @return ipAccountAddress The address of the IP Account associated with the given NFT token\\n    function ipAccount(uint256 chainId, address tokenContract, uint256 tokenId) external view returns (address);\\n\\n    /// @notice Returns the IPAccount implementation address.\\n    /// @return The address of the IPAccount implementation\\n    function getIPAccountImpl() external view returns (address);\\n}\\n\",\"keccak256\":\"0x95195a5f64a82cd8c9e72477edb6e5f2e2c51ccece6d56d68d48f09a7b861d6a\",\"license\":\"BUSL-1.1\"},\"@story-protocol/protocol-core/contracts/interfaces/registries/IIPAssetRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport { IIPAccountRegistry } from \\\"./IIPAccountRegistry.sol\\\";\\n\\n/// @title Interface for IP Account Registry\\n/// @notice This interface manages the registration and tracking of IP Accounts\\ninterface IIPAssetRegistry is IIPAccountRegistry {\\n    /// @notice Emits when an IP is officially registered into the protocol.\\n    /// @param ipId The canonical identifier for the IP.\\n    /// @param chainId The chain identifier of where the IP resides.\\n    /// @param tokenContract The token contract address of the IP NFT.\\n    /// @param tokenId The token identifier of the IP.\\n    /// @param name The name of the IP.\\n    /// @param uri The URI of the IP.\\n    /// @param registrationDate The date and time the IP was registered.\\n    event IPRegistered(\\n        address ipId,\\n        uint256 indexed chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        string name,\\n        string uri,\\n        uint256 registrationDate\\n    );\\n\\n    /// @notice Emits when an IP registration fee is paid.\\n    /// @param payer The address of the account that paid the fee.\\n    /// @param treasury The address of the treasury that received the fee.\\n    /// @param feeToken The address of the token used to pay the fee.\\n    /// @param amount The amount of the fee paid.\\n    event IPRegistrationFeePaid(\\n        address indexed payer,\\n        address indexed treasury,\\n        address indexed feeToken,\\n        uint96 amount\\n    );\\n\\n    /// @notice Emits when an IP registration fee is set.\\n    /// @param treasury The address of the treasury that will receive the fee.\\n    /// @param feeToken The address of the token used to pay the fee.\\n    /// @param feeAmount The amount of the fee.\\n    event RegistrationFeeSet(address indexed treasury, address indexed feeToken, uint96 feeAmount);\\n\\n    /// @notice Sets the registration fee for IP assets.\\n    /// @param treasury The address of the treasury that will receive the fee.\\n    /// @param feeToken The address of the token used to pay the fee.\\n    /// @param feeAmount The amount of the fee.\\n    function setRegistrationFee(address treasury, address feeToken, uint96 feeAmount) external;\\n\\n    /// @notice Tracks the total number of IP assets in existence.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Registers an NFT as an IP asset.\\n    /// @param chainid The chain identifier of where the IP NFT resides.\\n    /// @param tokenContract The address of the NFT.\\n    /// @param tokenId The token identifier of the NFT.\\n    /// @return id The address of the newly registered IP.\\n    function register(uint256 chainid, address tokenContract, uint256 tokenId) external returns (address id);\\n\\n    /// @notice Upgrades the IP account implementation.\\n    /// @param newIpAccountImpl The address of the new IP account implementation.\\n    function upgradeIPAccountImpl(address newIpAccountImpl) external;\\n\\n    /// @notice Gets the canonical IP identifier associated with an IP NFT.\\n    /// @dev This is equivalent to the address of its bound IP account.\\n    /// @param chainId The chain identifier of where the IP resides.\\n    /// @param tokenContract The address of the IP.\\n    /// @param tokenId The token identifier of the IP.\\n    /// @return ipId The IP's canonical address identifier.\\n    function ipId(uint256 chainId, address tokenContract, uint256 tokenId) external view returns (address);\\n\\n    /// @notice Checks whether an IP was registered based on its ID.\\n    /// @param id The canonical identifier for the IP.\\n    /// @return isRegistered Whether the IP was registered into the protocol.\\n    function isRegistered(address id) external view returns (bool);\\n\\n    /// @notice Retrieves the treasury address for IP assets.\\n    /// @return treasury The address of the treasury.\\n    function getTreasury() external view returns (address);\\n\\n    /// @notice Retrieves the registration fee token for IP assets.\\n    /// @return feeToken The address of the token used to pay the fee.\\n    function getFeeToken() external view returns (address);\\n\\n    /// @notice Retrieves the registration fee amount for IP assets.\\n    /// @return feeAmount The amount of the fee.\\n    function getFeeAmount() external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x43f2c964d667321391695cb2183091fc7345785a02ffbf0f7d183a3f6919c05c\",\"license\":\"BUSL-1.1\"},\"@story-protocol/protocol-core/contracts/lib/Licensing.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n/// @title Licensing\\n/// @notice Types and constants used by the licensing related contracts\\nlibrary Licensing {\\n    /// @notice This struct is used by IP owners to define the configuration\\n    /// when others are minting license tokens of their IP through the LicensingModule.\\n    /// When the `mintLicenseTokens` function of LicensingModule is called, the LicensingModule will read\\n    /// this configuration to determine the minting fee and execute the licensing hook if set.\\n    /// IP owners can set these configurations for each License or set the configuration for the IP\\n    /// so that the configuration applies to all licenses of the IP.\\n    /// If both the license and IP have the configuration, then the license configuration takes precedence.\\n    /// @param isSet Whether the configuration is set or not.\\n    /// @param mintingFee The minting fee to be paid when minting license tokens.\\n    /// @param licensingHook  The hook contract address for the licensing module, or address(0) if none\\n    /// @param hookData The data to be used by the licensing hook.\\n    /// @param commercialRevShare The commercial revenue share percentage.\\n    /// @param disabled Whether the license is disabled or not.\\n    /// @param expectMinimumGroupRewardShare The minimum percentage of the group\\u2019s reward share\\n    /// (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.\\n    /// If the remaining reward share in the group is less than the minimumGroupRewardShare,\\n    /// the IP cannot be added to the group.\\n    /// @param expectGroupRewardPool The address of the expected group reward pool.\\n    /// The IP can only be added to a group with this specified reward pool address,\\n    /// or address(0) if the IP does not want to be added to any group.\\n    struct LicensingConfig {\\n        bool isSet;\\n        uint256 mintingFee;\\n        address licensingHook;\\n        bytes hookData;\\n        uint32 commercialRevShare;\\n        bool disabled;\\n        uint32 expectMinimumGroupRewardShare;\\n        address expectGroupRewardPool;\\n    }\\n}\\n\",\"keccak256\":\"0xab5339d6fe04dcb1642f9a1558da9264017c3c87e8bb49fe3493d76ad04a2346\",\"license\":\"BUSL-1.1\"},\"contracts/MimbokuMultiround.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.26;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IIPAssetRegistry} from \\\"@story-protocol/protocol-core/contracts/interfaces/registries/IIPAssetRegistry.sol\\\";\\nimport {ICoreMetadataModule} from\\n    \\\"@story-protocol/protocol-core/contracts/interfaces/modules/metadata/ICoreMetadataModule.sol\\\";\\nimport {ILicensingModule} from\\n    \\\"@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingModule.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ISimpleERC721} from \\\"./interfaces/ISimpleERC721.sol\\\";\\nimport {IMimbokuMultiround} from \\\"./interfaces/IMimbokuMultiround.sol\\\";\\nimport {IOKXMultiMint} from \\\"./interfaces/IOKXMultiMint.sol\\\";\\n\\ncontract MimbokuMultiround is IMimbokuMultiround, Initializable, EIP712Upgradeable, AccessControlUpgradeable {\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n    /// We need a NFT contract to mint NFTs\\n    address public NFT_CONTRACT;\\n\\n    /// We need a MultiRound contract to manage rounds\\n    address public MULTIROUND_CONTRACT;\\n\\n    /// @notice Story Proof-of-Creativity PILicense Template address.\\n    address public PIL_TEMPLATE;\\n\\n    /// @notice The IP Asset Registry contract address.\\n    address public IP_ASSET_REGISTRY;\\n\\n    /// @notice The Core Metadata Module contract address.\\n    address public CORE_METADATA_MODULE;\\n\\n    /// @notice The Licensing Module contract address.\\n    address public LICENSING_MODULE;\\n\\n    /// @notice Root NFT\\n    RootNFT public rootNFT;\\n\\n    /// @notice IP information\\n    string public ipMetadataURI;\\n    bytes32 public ipMetadataHash;\\n\\n    /// @notice The list of the rest token_id\\n    uint256[] private remainingTokenIds;\\n\\n    /// @notice Number of remaining token_id\\n    uint256 private remainingTokenIdCount;\\n\\n    /// @notice Number of pre-minted NFTs\\n    uint256 public preMintedCount;\\n\\n    /// @notice Last minted token ID\\n    uint256 public lastMintedTokenId;\\n\\n    // /// @notice This flag is used for testing purposes due to the IP workflows contracts deployment.\\n    // /// @dev This flag is false by default. It should be set to true only when testing.\\n    // /// @dev This flag will disable the IP registration and derivative creation.\\n    // bool public isTest;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address defaultAdmin,\\n        address owner,\\n        address nftContract,\\n        address multiRoundContract,\\n        IPMetadata calldata ipMetadata\\n    ) public initializer {\\n        __EIP712_init(\\\"OKXMint\\\", \\\"1.0\\\");\\n\\n        __AccessControl_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(OWNER_ROLE, owner);\\n\\n        // The NFT collection contract\\n        NFT_CONTRACT = nftContract;\\n\\n        // The MultiRound contract for managing minting\\n        MULTIROUND_CONTRACT = multiRoundContract;\\n\\n        // The ip metadata\\n        rootNFT = ipMetadata.rootNFT;\\n\\n        // DEFAULT_LICENSE_TERMS_ID = ipMetadata.defaultLicenseTermsId;\\n        PIL_TEMPLATE = ipMetadata.pilTemplate;\\n        IP_ASSET_REGISTRY = ipMetadata.ipAssetRegistry;\\n        CORE_METADATA_MODULE = ipMetadata.coreMetadataModule;\\n        LICENSING_MODULE = ipMetadata.licenseModule;\\n        ipMetadataURI = ipMetadata.ipMetadataURI;\\n        ipMetadataHash = ipMetadata.ipMetadataHash;\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    //                               WRITE FUNCTIONS                                //\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Set number of pre-minted NFTs\\n    /// @param count The number of pre-minted NFTs\\n    function setPreMintedCount(uint256 count) external onlyRole(OWNER_ROLE) {\\n        // update new max supply\\n        uint256 maxSupplyTemp = IOKXMultiMint(MULTIROUND_CONTRACT).maxSupply();\\n        maxSupplyTemp -= preMintedCount;\\n        maxSupplyTemp += count;\\n        _setMaxSupply(maxSupplyTemp);\\n\\n        // update the remaining token_id count\\n        remainingTokenIdCount = IOKXMultiMint(MULTIROUND_CONTRACT).maxSupply();\\n\\n        // process the new pre-minted NFTs\\n        _processNewPreMinted(count);\\n    }\\n\\n    /// @notice Updates the MULTIROUND_CONTRACT and the NFT_CONTRACT addresses.\\n    /// @param nftContract The new NFT contract address.\\n    /// @param multiRoundContract The new MultiRound contract address.\\n    function setContracts(address nftContract, address multiRoundContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        NFT_CONTRACT = nftContract;\\n        MULTIROUND_CONTRACT = multiRoundContract;\\n    }\\n\\n    /// @notice Updates the whitelist signer.\\n    /// @param signer_ The new whitelist signer address.\\n    function setSigner(address signer_) external onlyRole(OWNER_ROLE) {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setActiveSigner(signer_, true);\\n    }\\n\\n    /// @notice Configure or update the maximum number of nfts that can be minted.\\n    /// @param newMaxSupply The new maximum number of nfts that can be minted.\\n    function setMaxSupply(uint256 newMaxSupply) external onlyRole(OWNER_ROLE) {\\n        _setMaxSupply(newMaxSupply);\\n\\n        // update the remaining token_id list\\n        delete remainingTokenIds; // Clear storage before re-allocating\\n        remainingTokenIds = new uint256[](newMaxSupply); // Allocate storage\\n\\n        remainingTokenIdCount = newMaxSupply;\\n\\n        // update the pre-minted count\\n        _processNewPreMinted(preMintedCount);\\n    }\\n\\n    /// @notice Configure or update the information of a certain round according to the stage\\n    /// @param stageMintInfo The mint information for the stage.\\n    function setStageMintInfo(IOKXMultiMint.StageMintInfo calldata stageMintInfo) external onlyRole(OWNER_ROLE) {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setStageMintInfo(stageMintInfo);\\n\\n        // update the max supply\\n        uint256 maxSupplyTemp = IOKXMultiMint(MULTIROUND_CONTRACT).maxSupply();\\n\\n        // update the remaining token_id list\\n        delete remainingTokenIds; // Clear storage before re-allocating\\n        remainingTokenIds = new uint256[](maxSupplyTemp); // Allocate storage\\n\\n        remainingTokenIdCount = maxSupplyTemp;\\n\\n        // update the pre-minted count\\n        _processNewPreMinted(preMintedCount);\\n    }\\n\\n    /// @notice Configure or update the mint time for a specific stage.\\n    /// @param stage Round identification.\\n    /// @param startTime The start time of the stage.\\n    /// @param endTime The end time of the stage.\\n    function setStageMintTime(string calldata stage, uint64 startTime, uint64 endTime) external onlyRole(OWNER_ROLE) {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setStageMintTime(stage, startTime, endTime);\\n    }\\n\\n    /// @notice According to the stage, set the maximum nft supply for a specific round.\\n    /// @param stage Round identification.\\n    /// @param maxSupply_ nft maximum supply.\\n    function setStageMaxSupply(string calldata stage, uint32 maxSupply_) external onlyRole(OWNER_ROLE) {\\n        uint256 preMaxSupply = IOKXMultiMint(MULTIROUND_CONTRACT).maxSupply();\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setStageMaxSupply(stage, maxSupply_);\\n\\n        // update the max supply\\n        uint256 newMaxSupply = IOKXMultiMint(MULTIROUND_CONTRACT).maxSupply();\\n        newMaxSupply -= preMaxSupply;\\n        newMaxSupply += maxSupply_;\\n        _setMaxSupply(newMaxSupply);\\n\\n        // update the remaining token_id list\\n        delete remainingTokenIds; // Clear storage before re-allocating\\n        remainingTokenIds = new uint256[](newMaxSupply); // Allocate storage\\n        remainingTokenIdCount = newMaxSupply;\\n\\n        // update the pre-minted count\\n        _processNewPreMinted(preMintedCount);\\n    }\\n\\n    /// @notice Set payment information for a specific round based on the stage\\n    /// @param stage Round identification.\\n    /// @param payeeAddress Payment address.\\n    /// @param paymentToken Token contract address for payment (if 0, it is a native token).\\n    /// @param price Single nft price.\\n    function setStagePayment(string calldata stage, address payeeAddress, address paymentToken, uint64 price)\\n        external\\n        onlyRole(OWNER_ROLE)\\n    {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setStagePayment(stage, payeeAddress, paymentToken, price);\\n    }\\n\\n    /// @notice Set the upper limit of the number of mints per address for a specific round according to the stage\\n    /// @param stage Round identification.\\n    /// @param mintLimitationPerAddress Single address mint limit.\\n    function setStageMintLimitationPerAddress(string calldata stage, uint8 mintLimitationPerAddress)\\n        external\\n        onlyRole(OWNER_ROLE)\\n    {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setStageMintLimitationPerAddress(stage, mintLimitationPerAddress);\\n    }\\n\\n    /// @notice Set whether server level signing is enabled for a specific round according to the stage\\n    /// @param stage Round identification.\\n    /// @param enableSig Whether to enable (true, false).\\n    function setStageEnableSig(string calldata stage, bool enableSig) external onlyRole(OWNER_ROLE) {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setStageEnableSig(stage, enableSig);\\n    }\\n\\n    /// @notice Set a valid signer address.\\n    ///     If the address has been configured, it is a modify function.abi\\n    ///     If the address has not been configured, then it is and add function to configure the address.\\n    /// @param signer Signer address.\\n    /// @param status Effective status.\\n    function setActiveSigner(address signer, bool status) external onlyRole(OWNER_ROLE) {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setActiveSigner(signer, status);\\n    }\\n\\n    /// @notice Set whether to restrict transfer, if configured to true, transfer is not allowed.\\n    ///     Otherwise, transfer is allowed.\\n    /// @param isTransferRestricted_ Whether to restrict transfer.\\n    /// @param startTime Start time.\\n    /// @param endTime End time.\\n    function setTransferRestricted(bool isTransferRestricted_, uint64 startTime, uint64 endTime)\\n        external\\n        onlyRole(OWNER_ROLE)\\n    {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setTransferRestricted(isTransferRestricted_, startTime, endTime);\\n    }\\n\\n    /// @notice Mints a NFT for the given recipient, registers it as an IP,\\n    ///         and makes it a derivative of the organization IP.\\n    /// @param stage         Identification of the stage\\n    /// @param signature     The signature from the whitelist signer. This signautre is genreated by having the whitelist\\n    /// @param proof         The proof for the leaf of the allowlist in a stage if mint type is Allowlist.\\n    /// @param mintparams    The mint parameter\\n    /// signer sign the caller's address (msg.sender) for this `mint` function.\\n    /// @return tokenId The token ID of the minted NFT.\\n    /// @return ipId The ID of the NFT IP.\\n    function mint(\\n        string calldata stage,\\n        bytes calldata signature,\\n        bytes32[] calldata proof,\\n        IOKXMultiMint.MintParams calldata mintparams\\n    ) external payable returns (uint256 tokenId, address ipId) {\\n        // register minting with OKX MultiRound, and get the remaining amount to mint\\n        uint256 amount =\\n            IOKXMultiMint(MULTIROUND_CONTRACT).eligibleCheckingAndRegister(stage, proof, signature, mintparams);\\n\\n        // get stage payment information\\n        IOKXMultiMint.StageMintInfo memory stageMintInfo = IOKXMultiMint(MULTIROUND_CONTRACT).stageToMint(stage);\\n\\n        if (stageMintInfo.price != 0) {\\n            if (stageMintInfo.paymentToken != address(0)) {\\n                // ERC20 token transfer\\n                require(\\n                    IERC20(stageMintInfo.paymentToken).transferFrom(\\n                        msg.sender, stageMintInfo.payeeAddress, stageMintInfo.price * amount\\n                    ),\\n                    \\\"Transfer ERC20 failed\\\"\\n                );\\n            } else {\\n                // native token transfer\\n                require(msg.value >= stageMintInfo.price * amount, \\\"Incorrect native payment amount\\\");\\n                payable(stageMintInfo.payeeAddress).transfer(msg.value);\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < amount; ++i) {\\n            // Mint NFt to the contract itself and register it as an IP\\n            (tokenId, ipId) = _mintToSelf(0);\\n\\n            // Transfer NFT to the recipient\\n            ISimpleERC721(NFT_CONTRACT).transferFrom(address(this), mintparams.to, tokenId);\\n\\n            lastMintedTokenId = tokenId;\\n        }\\n\\n        emit NFTMinted(mintparams.to, tokenId, ipId);\\n    }\\n\\n    /// @notice Pre-Mints a NFT with specified tokenID for the given recipient, registers it as an IP,\\n    ///         and makes it a derivative of the organization IP.\\n    /// @param to The recipient of the minted NFT.\\n    /// @param tokenId_ The token ID of the minted NFT.\\n    function preMint(address to, uint256 tokenId_) external onlyRole(DEFAULT_ADMIN_ROLE) returns (address ipId) {\\n        require(tokenId_ != 0 && tokenId_ <= preMintedCount, \\\"Invalid token ID\\\");\\n        // increase the total minted nft\\n        IOKXMultiMint(MULTIROUND_CONTRACT).increaseTotalMintedAmount();\\n\\n        // Mint NFt to the contract itself and register it as an IP\\n        uint256 tokenId = 0;\\n        (tokenId, ipId) = _mintToSelf(tokenId_);\\n\\n        // Transfer NFT to the recipient\\n        ISimpleERC721(NFT_CONTRACT).transferFrom(address(this), to, tokenId_);\\n\\n        emit NFTMinted(to, tokenId_, ipId);\\n    }\\n\\n    // /// @notice Enable the test mode.\\n    // /// @param isTest_ Whether to enable the test mode.\\n    // function enableTestMode(bool isTest_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    //     isTest = isTest_;\\n    // }\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    //                               READ FUNCTIONS                                 //\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Query the total number of minted under the current stage\\n    /// @param stage The stage name\\n    function stageToTotalSupply(string memory stage) external view returns (uint256) {\\n        return IOKXMultiMint(MULTIROUND_CONTRACT).stageToTotalSupply(stage);\\n    }\\n\\n    /// @notice Query the quantity that has been minted at a certain stage at a certain address\\n    /// @param to Inquiry address\\n    /// @param stage The stage name\\n    function mintRecord(address to, string memory stage) external view returns (uint256) {\\n        return IOKXMultiMint(MULTIROUND_CONTRACT).mintRecord(to, stage);\\n    }\\n\\n    /// @notice Query the total mint quantity\\n    function totalSupply() external view returns (uint256) {\\n        return IOKXMultiMint(MULTIROUND_CONTRACT).totalSupply();\\n    }\\n\\n    /// @notice Query configuration information for a specific stage\\n    /// @param stage The stage name\\n    function stageToMint(string memory stage) external view returns (IOKXMultiMint.StageMintInfo memory) {\\n        return IOKXMultiMint(MULTIROUND_CONTRACT).stageToMint(stage);\\n    }\\n\\n    /// @notice Query the maximum number of nfts that can be minted\\n    function maxSupply() external view returns (uint256) {\\n        return IOKXMultiMint(MULTIROUND_CONTRACT).maxSupply();\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    //                             Internal functions                               //\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    function _setMaxSupply(uint256 newMaxSupply) internal {\\n        IOKXMultiMint(MULTIROUND_CONTRACT).setMaxSupply(newMaxSupply);\\n    }\\n\\n    /// @notice Mints an NFT to the contract itself.\\n    /// @return tokenId The token ID of the minted NFT.\\n    /// @return ipId The IP ID of the minted NFT.\\n    function _mintToSelf(uint256 expectedTokenId) internal returns (uint256 tokenId, address ipId) {\\n        if (expectedTokenId != 0) {\\n            tokenId = expectedTokenId;\\n        } else {\\n            tokenId = _getRandomId();\\n        }\\n\\n        ISimpleERC721(NFT_CONTRACT).safeMint(address(this), tokenId);\\n\\n        address[] memory parentIpIds = rootNFT.ipIds;\\n        uint256[] memory licenseTermsIds = rootNFT.licenseTermsIds;\\n\\n        // register IP\\n        ipId = _registerIp(tokenId, ipMetadataHash);\\n\\n        // make derivative\\n        _makeDerivative(ipId, parentIpIds, PIL_TEMPLATE, licenseTermsIds, \\\"\\\", 0, 0, 0);\\n    }\\n\\n    /// @notice Get a random token ID from the remaining token IDs.\\n    function _getRandomId() internal returns (uint256) {\\n        uint256 rand =\\n            uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) % remainingTokenIdCount;\\n\\n        uint256 tokenId = remainingTokenIds[rand] == 0 ? (rand + 1) : remainingTokenIds[rand];\\n\\n        // swap the last element with the selected element\\n        remainingTokenIds[rand] = remainingTokenIds[remainingTokenIdCount - 1] == 0\\n            ? remainingTokenIdCount\\n            : remainingTokenIds[remainingTokenIdCount - 1];\\n\\n        // decrease the remaining token count\\n        --remainingTokenIdCount;\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Process the new pre-minted NFTs.\\n    /// @param count The number of pre-minted NFTs\\n    function _processNewPreMinted(uint256 count) internal {\\n        preMintedCount = count;\\n\\n        // update the remaining token_id list by swapping the last elements with the pre-minted token ids\\n        for (uint256 i = 0; i < count; ++i) {\\n            remainingTokenIds[i] = remainingTokenIdCount - i;\\n        }\\n\\n        remainingTokenIdCount -= count;\\n    }\\n\\n    /// @notice Mints a new token and registers as an IP asset.\\n    /// @param tokenId The ID of the minted token.\\n    /// @param nftMetadataHash The hash of the metadata for the IP NFT.\\n    /// @return ipId The ID of the newly created IP.\\n    function _registerIp(uint256 tokenId, bytes32 nftMetadataHash) internal returns (address ipId) {\\n        ipId = IIPAssetRegistry(IP_ASSET_REGISTRY).register(block.chainid, NFT_CONTRACT, tokenId);\\n\\n        // Commented out due to all parameters are empty\\n        // // set the IP metadata if they are not empty\\n        // if (\\n        //     keccak256(abi.encodePacked(ipMetadataURI)) != keccak256(\\\"\\\") || ipMetadataHash != bytes32(0)\\n        //         || nftMetadataHash != bytes32(0)\\n        // ) {\\n        //     ICoreMetadataModule(CORE_METADATA_MODULE).setAll(ipId, ipMetadataURI, ipMetadataHash, nftMetadataHash);\\n        // }\\n    }\\n\\n    /// @notice Register `ipId` as a derivative of `parentIpIds` under `licenseTemplate` with `licenseTermsIds`.\\n    /// @param ipId The ID of the IP to be registered as a derivative.\\n    /// @param parentIpIds The IDs of the parent IPs.\\n    /// @param licenseTemplate The address of the license template.\\n    /// @param licenseTermsIds The IDs of the license terms.\\n    /// @param royaltyContext The royalty context, should be empty for Royalty Policy LAP.\\n    /// @param maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.\\n    /// @param maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies.\\n    /// @param maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens.\\n    function _makeDerivative(\\n        address ipId,\\n        address[] memory parentIpIds,\\n        address licenseTemplate,\\n        uint256[] memory licenseTermsIds,\\n        bytes memory royaltyContext,\\n        uint256 maxMintingFee,\\n        uint32 maxRts,\\n        uint32 maxRevenueShare\\n    ) internal {\\n        ILicensingModule(LICENSING_MODULE).registerDerivative({\\n            childIpId: ipId,\\n            parentIpIds: parentIpIds,\\n            licenseTermsIds: licenseTermsIds,\\n            licenseTemplate: licenseTemplate,\\n            royaltyContext: royaltyContext,\\n            maxMintingFee: maxMintingFee,\\n            maxRts: maxRts,\\n            maxRevenueShare: maxRevenueShare\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0xdd39ca703d075a4c0574b2b69168d6fdef7ed65a75ce0b4f540fbedae37ef83e\",\"license\":\"MIT\"},\"contracts/interfaces/IMimbokuMultiround.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport {IOKXMultiMint} from \\\"./IOKXMultiMint.sol\\\";\\n\\n/// @title Story NFT Interface\\n/// @notice A Story NFT is a soulbound NFT that has an unified token URI for all tokens.\\ninterface IMimbokuMultiround {\\n    /// @dev Structure for the root IP\\n    /// @param contractAddress The root NFT contract address.\\n    /// @param tokenIds The root NFT token ID.\\n    /// @param ipId The root IP ID.\\n    struct RootNFT {\\n        address contractAddress;\\n        uint256[] tokenIds;\\n        address[] ipIds;\\n        uint256[] licenseTermsIds;\\n    }\\n\\n    /// @dev Structure for the initial contract IP parameters\\n    /// @param ipMetadataURI The URI of the metadata for all IP from this collection.\\n    /// @param ipMetadataHash The hash of the metadata for all IP from this collection.\\n    struct IPMetadata {\\n        RootNFT rootNFT;\\n        address pilTemplate;\\n        address ipAssetRegistry;\\n        address coreMetadataModule;\\n        address licenseModule;\\n        string ipMetadataURI;\\n        bytes32 ipMetadataHash;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    //                              Events                                    //\\n    ////////////////////////////////////////////////////////////////////////////\\n    /// @notice Emitted when a NFT is minted.\\n    /// @param recipient The address of the recipient of the NFT.\\n    /// @param tokenId The token ID of the minted NFT.\\n    /// @param ipId The ID of the NFT IP.\\n\\n    event NFTMinted(address recipient, uint256 tokenId, address ipId);\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    //                               WRITE FUNCTIONS                                //\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Updates the whitelist signer.\\n    /// @param signer_ The new whitelist signer address.\\n    function setSigner(address signer_) external;\\n\\n    /// @notice Configure or update the maximum number of nfts that can be minted.\\n    /// @param newMaxSupply The new maximum number of nfts that can be minted.\\n    function setMaxSupply(uint256 newMaxSupply) external;\\n\\n    /// @notice Configure or update the information of a certain round according to the stage\\n    /// @param stageMintInfo The mint information for the stage.\\n    function setStageMintInfo(IOKXMultiMint.StageMintInfo calldata stageMintInfo) external;\\n\\n    /// @notice Configure or update the mint time for a specific stage.\\n    /// @param stage Round identification.\\n    /// @param startTime The start time of the stage.\\n    /// @param endTime The end time of the stage.\\n    function setStageMintTime(string calldata stage, uint64 startTime, uint64 endTime) external;\\n\\n    /// @notice According to the stage, set the maximum nft supply for a specific round.\\n    /// @param stage Round identification.\\n    /// @param maxSupply nft maximum supply.\\n    function setStageMaxSupply(string calldata stage, uint32 maxSupply) external;\\n\\n    /// @notice Set payment information for a specific round based on the stage\\n    /// @param stage Round identification.\\n    /// @param payeeAddress Payment address.\\n    /// @param paymentToken Token contract address for payment (if 0, it is a native token).\\n    /// @param price Single nft price.\\n    function setStagePayment(string calldata stage, address payeeAddress, address paymentToken, uint64 price)\\n        external;\\n\\n    /// @notice Set the upper limit of the number of mints per address for a specific round according to the stage\\n    /// @param stage Round identification.\\n    /// @param mintLimitationPerAddress Single address mint limit.\\n    function setStageMintLimitationPerAddress(string calldata stage, uint8 mintLimitationPerAddress) external;\\n\\n    /// @notice Set whether server level signing is enabled for a specific round according to the stage\\n    /// @param stage Round identification.\\n    /// @param enableSig Whether to enable (true, false).\\n    function setStageEnableSig(string calldata stage, bool enableSig) external;\\n\\n    /// @notice Set a valid signer address.\\n    ///     If the address has been configured, it is a modify function.abi\\n    ///     If the address has not been configured, then it is and add function to configure the address.\\n    /// @param signer Signer address.\\n    /// @param status Effective status.\\n    function setActiveSigner(address signer, bool status) external;\\n\\n    /// @notice Set whether to restrict transfer, if configured to true, transfer is not allowed.\\n    ///     Otherwise, transfer is allowed.\\n    /// @param isTransferRestricted_ Whether to restrict transfer.\\n    /// @param startTime Start time.\\n    /// @param endTime End time.\\n    function setTransferRestricted(bool isTransferRestricted_, uint64 startTime, uint64 endTime) external;\\n\\n    /// @notice Mints a NFT for the given recipient, registers it as an IP,\\n    ///         and makes it a derivative of the organization IP.\\n    /// @param stage         Identification of the stage\\n    /// @param signature     The signature from the whitelist signer. This signautre is genreated by having the whitelist\\n    /// the 3rd param, proof, is the proof for the leaf of the allowlist in a stage if mint type is Allowlist.\\n    /// @param mintparams    The mint parameter\\n    /// signer sign the caller's address (msg.sender) for this `mint` function.\\n    /// @return tokenId The token ID of the minted NFT.\\n    /// @return ipId The ID of the NFT IP.\\n    function mint(\\n        string calldata stage,\\n        bytes calldata signature,\\n        bytes32[] calldata proof,\\n        IOKXMultiMint.MintParams calldata mintparams\\n    ) external payable returns (uint256 tokenId, address ipId);\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    //                               READ FUNCTIONS                                 //\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Query the total number of minted under the current stage\\n    /// @param stage The stage name\\n    function stageToTotalSupply(string memory stage) external view returns (uint256);\\n\\n    /// @notice Query the quantity that has been minted at a certain stage at a certain address\\n    /// @param to Inquiry address\\n    /// @param stage The stage name\\n    function mintRecord(address to, string memory stage) external view returns (uint256);\\n\\n    /// @notice Query the total mint quantity\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Query configuration information for a specific stage\\n    /// @param stage The stage name\\n    function stageToMint(string memory stage) external view returns (IOKXMultiMint.StageMintInfo memory);\\n}\\n\",\"keccak256\":\"0xb987767d6e714ea62d884528cc2c4bc4e8682c5be68f832bc1d9d31837bfbd70\",\"license\":\"MIT\"},\"contracts/interfaces/IOKXMultiMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\n/// @title Story NFT Interface\\n/// @notice A Story NFT is a soulbound NFT that has an unified token URI for all tokens.\\ninterface IOKXMultiMint {\\n    // ////////////////////////////////////////////////////////////////////////////\\n    // //                              Errors                                    //\\n    // ////////////////////////////////////////////////////////////////////////////\\n    // /// @notice Invalid whitelist signature.\\n    error InvalidSignature();\\n\\n    /// @notice The provided whitelist signature is already used.\\n    error SignatureAlreadyUsed();\\n\\n    error ExceedPerAddressLimit();\\n    error ExceedMaxSupply();\\n    error NotActive();\\n    error NonExistStage();\\n    error ExistStage();\\n    error InvalidStageMaxSupply();\\n    error InvalidMaxSupply();\\n    error ExpiredSignature();\\n    error ExceedMaxSupplyForStage();\\n    error InvalidPayeeAddress();\\n    error InvalidTime();\\n    error NotWhitelisted();\\n\\n    enum MintType {\\n        Public,\\n        Allowlist\\n    }\\n\\n    /**\\n     * @notice The mint details for each stage\\n     *\\n     * @param enableSig                If needs server signature.\\n     * @param limitationForAddress     The mint amountlimitation for each address in a stage.\\n     * @param maxSupplyForStage        The max supply for a stage.\\n     * @param startTime                The start time of a stage.\\n     * @param endTime                  The end time of a stage.\\n     * @param price                    The mint price in a stage.\\n     * @param paymentToken             The mint paymentToken in a stage.\\n     * @param payeeAddress             The payeeAddress in a stage.\\n     * @param allowListMerkleRoot      The allowListMerkleRoot in a stage.\\n     * @param stage                    The tag of the stage.\\n     * @param mintType                 Mint type. e.g.Public,Allowlist,Signd\\n     */\\n    struct StageMintInfo {\\n        bool enableSig; //8bits\\n        uint8 limitationForAddress; //16bits\\n        uint32 maxSupplyForStage; //48bits\\n        uint64 startTime; //112bits\\n        uint64 endTime; //176bits\\n        uint256 price; //240bits\\n        address paymentToken;\\n        address payeeAddress;\\n        bytes32 allowListMerkleRoot;\\n        string stage;\\n        MintType mintType;\\n    }\\n\\n    /**\\n     * @notice The parameter of mint.\\n     *\\n     * @param amount     The amount of mint.\\n     * @param tokenId    Unused.\\n     * @param nonce      Random number.For server signature, only used in enableSig is true.\\n     * @param expiry     The expiry of server signature, only used in enableSig is true.\\n     * @param to         The to address of the mint.\\n     */\\n    struct MintParams {\\n        uint256 amount;\\n        uint256 tokenId;\\n        uint256 nonce;\\n        uint256 expiry;\\n        address to;\\n    }\\n\\n    /// @notice Emitted when the signer is updated.\\n    /// @param signer The new signer address.\\n    event SignerUpdated(address signer);\\n\\n    event StageMintTimeSet(string stage, uint64 startTime, uint64 endTime);\\n    event StageMintLimitationPerAddressSet(string stage, uint8 mintLimitationPerAddress);\\n    event StageMaxSupplySet(string stage, uint32 maxSupply);\\n    event MaxSupplySet(uint32 maxSupply);\\n    event StageEnableSigSet(string stage, bool enableSig);\\n    event StageMintInfoSet(StageMintInfo stageMintInfo);\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    //                               WRITE FUNCTIONS                                //\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Check if the minting action of a address is eligible.\\n    /// @param stage The stage name.\\n    /// @param proof The proof of the minting action.\\n    ///     signature The signature of the minting action. (not used)\\n    /// @param mintparams The minting parameters.\\n    function eligibleCheckingAndRegister(\\n        string calldata stage,\\n        bytes32[] calldata proof,\\n        bytes calldata signature,\\n        MintParams calldata mintparams\\n    ) external returns (uint256 amount);\\n\\n    /// @notice Configure or update the maximum number of nfts that can be minted.\\n    /// @param newMaxSupply The new maximum number of nfts that can be minted.\\n    function setMaxSupply(uint256 newMaxSupply) external;\\n\\n    /// @notice Updates the whitelist signer.\\n    /// @param signer_ The new whitelist signer address.\\n    function setSigner(address signer_) external;\\n\\n    /// @notice Configure or update the information of a certain round according to the stage\\n    /// @param stageMintInfo The mint information for the stage.\\n    function setStageMintInfo(IOKXMultiMint.StageMintInfo calldata stageMintInfo) external;\\n\\n    /// @notice Configure or update the mint time for a specific stage.\\n    /// @param stage Round identification.\\n    /// @param startTime The start time of the stage.\\n    /// @param endTime The end time of the stage.\\n    function setStageMintTime(string calldata stage, uint64 startTime, uint64 endTime) external;\\n\\n    /// @notice According to the stage, set the maximum nft supply for a specific round.\\n    /// @param stage Round identification.\\n    /// @param maxSupply nft maximum supply.\\n    function setStageMaxSupply(string calldata stage, uint32 maxSupply) external;\\n\\n    /// @notice Set payment information for a specific round based on the stage\\n    /// @param stage Round identification.\\n    /// @param payeeAddress Payment address.\\n    /// @param paymentToken Token contract address for payment (if 0, it is a native token).\\n    /// @param price Single nft price.\\n    function setStagePayment(string calldata stage, address payeeAddress, address paymentToken, uint256 price)\\n        external;\\n\\n    /// @notice Set the upper limit of the number of mints per address for a specific round according to the stage\\n    /// @param stage Round identification.\\n    /// @param mintLimitationPerAddress Single address mint limit.\\n    function setStageMintLimitationPerAddress(string calldata stage, uint8 mintLimitationPerAddress) external;\\n\\n    /// @notice Set whether server level signing is enabled for a specific round according to the stage\\n    /// @param stage Round identification.\\n    /// @param enableSig Whether to enable (true, false).\\n    function setStageEnableSig(string calldata stage, bool enableSig) external;\\n\\n    /// @notice Set a valid signer address.\\n    ///     If the address has been configured, it is a modify function.abi\\n    ///     If the address has not been configured, then it is an add function to configure the address.\\n    /// @param signer Signer address.\\n    /// @param status Effective status.\\n    function setActiveSigner(address signer, bool status) external;\\n\\n    /// @notice Set whether to restrict transfer, if configured to true, transfer is not allowed.\\n    ///     Otherwise, transfer is allowed.\\n    /// @param isTransferRestricted_ Whether to restrict transfer.\\n    /// @param startTime Start time.\\n    /// @param endTime End time.\\n    function setTransferRestricted(bool isTransferRestricted_, uint64 startTime, uint64 endTime) external;\\n\\n    /// @notice Function for pre-minted NFTs.\\n    function increaseTotalMintedAmount() external;\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    //                               READ FUNCTIONS                                 //\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Query the total number of minted under the current stage\\n    /// @param stage The stage name\\n    function stageToTotalSupply(string memory stage) external view returns (uint256);\\n\\n    /// @notice Query the quantity that has been minted at a certain stage at a certain address\\n    /// @param to Inquiry address\\n    /// @param stage The stage name\\n    function mintRecord(address to, string memory stage) external view returns (uint256);\\n\\n    /// @notice Query the total mint quantity\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Query configuration information for a specific stage\\n    /// @param stage The stage name\\n    function stageToMint(string memory stage) external view returns (IOKXMultiMint.StageMintInfo memory);\\n\\n    /// @notice Query the maximum number of total mints\\n    function maxSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xacf9daab1c2883da45abcfdbbe850fd6ee5f647984a986df77e3006d6f000510\",\"license\":\"MIT\"},\"contracts/interfaces/ISimpleERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.26;\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface ISimpleERC721 {\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     * @param to The address that will own the minted token\\n     * @param tokenId The token id to mint\\n     */\\n    function safeMint(address to, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xf72b6ca5caee0b02084196422bd8f3be0449986a61b0806bc414a5710c95919b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001f61002460201b60201c565b61018e565b600061003461012860201b60201c565b90508060000160089054906101000a900460ff161561007f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101255767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161011c9190610173565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b61016d81610150565b82525050565b60006020820190506101886000830184610164565b92915050565b615f6e8061019d6000396000f3fe60806040526004361061023b5760003560e01c80636f8b44b01161012e578063aa4daf24116100ab578063d547741f1161006f578063d547741f14610891578063d5abeb01146108ba578063d8952a49146108e5578063e32e2bbc1461090e578063e58378bb146109375761023b565b8063aa4daf24146107bc578063b67f21be146107ed578063b921379914610816578063ce617ce51461083f578063d4aa8d6f146108685761023b565b806391d14854116100f257806391d14854146106c35780639fe78f7914610700578063a217fddf1461073d578063a5f5a4a814610768578063a95feefe146107915761023b565b80636f8b44b0146105e85780637f5866041461061157806384b0196e1461063c5780638e7d25a81461066d5780639035e5a6146106985761023b565b806336568abe116101bc5780635a9baebd116101805780635a9baebd1461051757806362f42822146105405780636508b10a1461056957806365165aa5146105945780636c19e783146105bf5761023b565b806336568abe1461043257806341c782c51461045b5780634899cf0b146104865780634b6d9411146104af5780634d73cbd5146104da5761023b565b80631fda9a02116102035780631fda9a021461033b578063248a9ca31461036657806328c1a4f5146103a3578063290c292d146103cc5780632f2ff15d146104095761023b565b806301ffc9a7146102405780630f9f6cbd1461027d5780630fbe291a146102a857806312c4ce88146102e557806318160ddd14610310575b600080fd5b34801561024c57600080fd5b50610267600480360381019061026291906134f4565b610962565b604051610274919061353c565b60405180910390f35b34801561028957600080fd5b506102926109dc565b60405161029f91906135e7565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca919061379c565b610a6a565b6040516102dc9190613811565b60405180910390f35b3480156102f157600080fd5b506102fa610b12565b604051610307919061383b565b60405180910390f35b34801561031c57600080fd5b50610325610b38565b6040516103329190613811565b60405180910390f35b34801561034757600080fd5b50610350610bd0565b60405161035d919061383b565b60405180910390f35b34801561037257600080fd5b5061038d6004803603810190610388919061388c565b610bf4565b60405161039a91906138c8565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c5919061390f565b610c22565b005b3480156103d857600080fd5b506103f360048036038101906103ee919061397b565b610ce0565b604051610400919061383b565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b91906139bb565b610ea8565b005b34801561043e57600080fd5b50610459600480360381019061045491906139bb565b610eca565b005b34801561046757600080fd5b50610470610f45565b60405161047d919061383b565b60405180910390f35b34801561049257600080fd5b506104ad60048036038101906104a89190613a3b565b610f6b565b005b3480156104bb57600080fd5b506104c461102c565b6040516104d19190613811565b60405180910390f35b3480156104e657600080fd5b5061050160048036038101906104fc9190613a8e565b611032565b60405161050e9190613d0d565b60405180910390f35b34801561052357600080fd5b5061053e60048036038101906105399190613d8f565b6110e2565b005b34801561054c57600080fd5b5061056760048036038101906105629190613e3c565b6111a9565b005b34801561057557600080fd5b5061057e611379565b60405161058b9190613811565b60405180910390f35b3480156105a057600080fd5b506105a961137f565b6040516105b6919061383b565b60405180910390f35b3480156105cb57600080fd5b506105e660048036038101906105e19190613e85565b6113a5565b005b3480156105f457600080fd5b5061060f600480360381019061060a9190613eb2565b611463565b005b34801561061d57600080fd5b50610626611519565b604051610633919061383b565b60405180910390f35b34801561064857600080fd5b5061065161153f565b6040516106649796959493929190613fc9565b60405180910390f35b34801561067957600080fd5b50610682611651565b60405161068f919061383b565b60405180910390f35b3480156106a457600080fd5b506106ad61167d565b6040516106ba919061383b565b60405180910390f35b3480156106cf57600080fd5b506106ea60048036038101906106e591906139bb565b6116a3565b6040516106f7919061353c565b60405180910390f35b34801561070c57600080fd5b5061072760048036038101906107229190613a8e565b61171c565b6040516107349190613811565b60405180910390f35b34801561074957600080fd5b506107526117c1565b60405161075f91906138c8565b60405180910390f35b34801561077457600080fd5b5061078f600480360381019061078a919061404d565b6117c8565b005b34801561079d57600080fd5b506107a6611889565b6040516107b391906138c8565b60405180910390f35b6107d660048036038101906107d19190614178565b61188f565b6040516107e4929190614242565b60405180910390f35b3480156107f957600080fd5b50610814600480360381019061080f9190614297565b611cd1565b005b34801561082257600080fd5b5061083d60048036038101906108389190614316565b611d92565b005b34801561084b57600080fd5b5061086660048036038101906108619190613eb2565b6121ea565b005b34801561087457600080fd5b5061088f600480360381019061088a91906143ad565b612375565b005b34801561089d57600080fd5b506108b860048036038101906108b391906139bb565b612439565b005b3480156108c657600080fd5b506108cf61245b565b6040516108dc9190613811565b60405180910390f35b3480156108f157600080fd5b5061090c60048036038101906109079190614421565b6124f3565b005b34801561091a57600080fd5b506109356004803603810190610930919061448d565b612586565b005b34801561094357600080fd5b5061094c61281d565b60405161095991906138c8565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109d557506109d482612841565b5b9050919050565b600a80546109e99061451c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a159061451c565b8015610a625780601f10610a3757610100808354040283529160200191610a62565b820191906000526020600020905b815481529060010190602001808311610a4557829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630fbe291a84846040518363ffffffff1660e01b8152600401610ac992919061454d565b602060405180830381865afa158015610ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0a9190614592565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190614592565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610bff6128ab565b905080600001600084815260200190815260200160002060010154915050919050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e610c4c816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328c1a4f584846040518363ffffffff1660e01b8152600401610ca99291906145bf565b600060405180830381600087803b158015610cc357600080fd5b505af1158015610cd7573d6000803e3d6000fd5b50505050505050565b60008060001b610cef816128d3565b60008314158015610d025750600e548311155b610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3890614634565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317d13a2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dab57600080fd5b505af1158015610dbf573d6000803e3d6000fd5b505050506000610dce846128e7565b809450819250505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3087876040518463ffffffff1660e01b8152600401610e3393929190614654565b600060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b505050507f89a2c92e65780856b461f06435fffd0fb445240ba3cfee7e8f18e01dca40c073858585604051610e989392919061468b565b60405180910390a1505092915050565b610eb182610bf4565b610eba816128d3565b610ec48383612ad0565b50505050565b610ed2612bd1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f36576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f408282612bd9565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e610f95816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634899cf0b8585856040518463ffffffff1660e01b8152600401610ff4939291906146d1565b600060405180830381600087803b15801561100e57600080fd5b505af1158015611022573d6000803e3d6000fd5b5050505050505050565b600e5481565b61103a613343565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d73cbd5836040518263ffffffff1660e01b815260040161109591906135e7565b600060405180830381865afa1580156110b2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110db919061494d565b9050919050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61110c816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fb5656a87878787876040518663ffffffff1660e01b815260040161116f9594939291906149fe565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b50505050505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6111d3816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362f42822836040518263ffffffff1660e01b815260040161122e9190614d01565b600060405180830381600087803b15801561124857600080fd5b505af115801561125c573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f39190614592565b9050600c600061130391906133fd565b8067ffffffffffffffff81111561131d5761131c613671565b5b60405190808252806020026020018201604052801561134b5781602001602082028036833780820191505090505b50600c908051906020019061136192919061341e565b5080600d81905550611374600e54612cdb565b505050565b600f5481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6113cf816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328c1a4f58360016040518363ffffffff1660e01b815260040161142d9291906145bf565b600060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61148d816128d3565b61149682612d45565b600c60006114a491906133fd565b8167ffffffffffffffff8111156114be576114bd613671565b5b6040519080825280602002602001820160405280156114ec5781602001602082028036833780820191505090505b50600c908051906020019061150292919061341e565b5081600d81905550611515600e54612cdb565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606080600080600060606000611555612dd5565b90506000801b816000015414801561157357506000801b8160010154145b6115b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a990614d6f565b60405180910390fd5b6115ba612dfd565b6115c2612e9e565b46306000801b600067ffffffffffffffff8111156115e3576115e2613671565b5b6040519080825280602002602001820160405280156116115781602001602082028036833780820191505090505b507f0f0000000000000000000000000000000000000000000000000000000000000095949392919097509750975097509750975097505090919293949596565b60068060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806116ae6128ab565b905080600001600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639fe78f79836040518263ffffffff1660e01b815260040161177991906135e7565b602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba9190614592565b9050919050565b6000801b81565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6117f2816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5f5a4a88585856040518463ffffffff1660e01b815260040161185193929190614d8f565b600060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b5050505050505050565b600b5481565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663832f9f548b8b89898d8d8b6040518863ffffffff1660e01b81526004016118fb9796959493929190614f0a565b6020604051808303816000875af115801561191a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193e9190614592565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d73cbd58c8c6040518363ffffffff1660e01b815260040161199f929190614f6b565b600060405180830381865afa1580156119bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119e5919061494d565b905060008160a0015114611ba557600073ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff1614611b06578060c0015173ffffffffffffffffffffffffffffffffffffffff166323b872dd338360e00151858560a00151611a619190614fbe565b6040518463ffffffff1660e01b8152600401611a7f93929190614654565b6020604051808303816000875af1158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac29190615000565b611b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af890615079565b60405180910390fd5b611ba4565b818160a00151611b169190614fbe565b341015611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f906150e5565b60405180910390fd5b8060e0015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611ba2573d6000803e3d6000fd5b505b5b60005b82811015611c7557611bba60006128e7565b809550819650505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30886080016020810190611c129190613e85565b886040518463ffffffff1660e01b8152600401611c3193929190614654565b600060405180830381600087803b158015611c4b57600080fd5b505af1158015611c5f573d6000803e3d6000fd5b5050505084600f81905550806001019050611ba8565b507f89a2c92e65780856b461f06435fffd0fb445240ba3cfee7e8f18e01dca40c073856080016020810190611caa9190613e85565b8585604051611cbb9392919061468b565b60405180910390a1505097509795505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e611cfb816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b67f21be8585856040518463ffffffff1660e01b8152600401611d5a93929190615114565b600060405180830381600087803b158015611d7457600080fd5b505af1158015611d88573d6000803e3d6000fd5b5050505050505050565b6000611d9c612f3f565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015611dea5750825b9050600060018367ffffffffffffffff16148015611e1f575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611e2d575080155b15611e64576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315611eb45760018560000160086101000a81548160ff0219169083151502179055505b611f286040518060400160405280600781526020017f4f4b584d696e74000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250612f67565b611f30612f7d565b611f3d6000801b8b612ad0565b50611f687fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8a612ad0565b50876000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858060000190611ffa9190615155565b600681816120089190615779565b90505085602001602081019061201e9190613e85565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560400160208101906120719190613e85565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560600160208101906120c49190613e85565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560800160208101906121179190613e85565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858060a001906121679190615787565b600a91826121769291906158bd565b508560c00135600b8190555083156121de5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516121d591906159c8565b60405180910390a15b50505050505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e612214816128d3565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190614592565b9050600e54816122b791906159e3565b905082816122c59190615a17565b90506122d081612d45565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa15801561233d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123619190614592565b600d8190555061237083612cdb565b505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61239f816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4aa8d6f868686866040518563ffffffff1660e01b81526004016124009493929190615a4b565b600060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050505050505050565b61244282610bf4565b61244b816128d3565b6124558383612bd9565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ee9190614592565b905090565b6000801b612500816128d3565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6125b0816128d3565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa15801561261f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126439190614592565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e32e2bbc8686866040518463ffffffff1660e01b81526004016126a493929190615a9a565b600060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa158015612745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127699190614592565b9050818161277791906159e3565b90508363ffffffff168161278b9190615a17565b905061279681612d45565b600c60006127a491906133fd565b8067ffffffffffffffff8111156127be576127bd613671565b5b6040519080825280602002602001820160405280156127ec5781602001602082028036833780820191505090505b50600c908051906020019061280292919061341e565b5080600d81905550612815600e54612cdb565b505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b6128e4816128df612bd1565b612f87565b50565b600080600083146128fa57829150612905565b612902612fd8565b91505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a144819430846040518363ffffffff1660e01b8152600401612960929190615acc565b600060405180830381600087803b15801561297a57600080fd5b505af115801561298e573d6000803e3d6000fd5b5050505060006006600201805480602002602001604051908101604052809291908181526020018280548015612a1957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116129cf575b5050505050905060006006600301805480602002602001604051908101604052809291908181526020018280548015612a7157602002820191906000526020600020905b815481526020019060010190808311612a5d575b50505050509050612a8484600b5461311d565b9250612ac98383600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518060200160405280600081525060008060006131e9565b5050915091565b600080612adb6128ab565b9050612ae784846116a3565b612bc557600181600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612b61612bd1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050612bcb565b60009150505b92915050565b600033905090565b600080612be46128ab565b9050612bf084846116a3565b15612ccf57600081600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612c6b612bd1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050612cd5565b60009150505b92915050565b80600e8190555060005b81811015612d285780600d54612cfb91906159e3565b600c8281548110612d0f57612d0e615af5565b5b9060005260206000200181905550806001019050612ce5565b5080600d6000828254612d3b91906159e3565b9250508190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f8b44b0826040518263ffffffff1660e01b8152600401612da09190613811565b600060405180830381600087803b158015612dba57600080fd5b505af1158015612dce573d6000803e3d6000fd5b5050505050565b60007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100905090565b60606000612e09612dd5565b9050806002018054612e1a9061451c565b80601f0160208091040260200160405190810160405280929190818152602001828054612e469061451c565b8015612e935780601f10612e6857610100808354040283529160200191612e93565b820191906000526020600020905b815481529060010190602001808311612e7657829003601f168201915b505050505091505090565b60606000612eaa612dd5565b9050806003018054612ebb9061451c565b80601f0160208091040260200160405190810160405280929190818152602001828054612ee79061451c565b8015612f345780601f10612f0957610100808354040283529160200191612f34565b820191906000526020600020905b815481529060010190602001808311612f1757829003601f168201915b505050505091505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612f6f61328e565b612f7982826132ce565b5050565b612f8561328e565b565b612f9182826116a3565b612fd45780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401612fcb929190615b24565b60405180910390fd5b5050565b600080600d54424433604051602001612ff393929190615bb6565b6040516020818303038152906040528051906020012060001c6130169190615c22565b9050600080600c838154811061302f5761302e615af5565b5b90600052602060002001541461306357600c828154811061305357613052615af5565b5b9060005260206000200154613071565b6001826130709190615a17565b5b90506000600c6001600d5461308691906159e3565b8154811061309757613096615af5565b5b9060005260206000200154146130d957600c6001600d546130b891906159e3565b815481106130c9576130c8615af5565b5b90600052602060002001546130dd565b600d545b600c83815481106130f1576130f0615af5565b5b9060005260206000200181905550600d6000815461310e90615c53565b91905081905550809250505090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca247ac4660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b815260040161319e93929190615c7c565b6020604051808303816000875af11580156131bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e19190615cb3565b905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4d56c58989888a898989896040518963ffffffff1660e01b8152600401613252989796959493929190615dd3565b600060405180830381600087803b15801561326c57600080fd5b505af1158015613280573d6000803e3d6000fd5b505050505050505050505050565b613296613323565b6132cc576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6132d661328e565b60006132e0612dd5565b9050828160020190816132f39190615e66565b50818160030190816133059190615e66565b506000801b81600001819055506000801b8160010181905550505050565b600061332d612f3f565b60000160089054906101000a900460ff16905090565b604051806101600160405280600015158152602001600060ff168152602001600063ffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160608152602001600060018111156133f7576133f6613ba7565b5b81525090565b508054600082559060005260206000209081019061341b919061346b565b50565b82805482825590600052602060002090810192821561345a579160200282015b8281111561345957825182559160200191906001019061343e565b5b509050613467919061346b565b5090565b5b8082111561348457600081600090555060010161346c565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6134d18161349c565b81146134dc57600080fd5b50565b6000813590506134ee816134c8565b92915050565b60006020828403121561350a57613509613492565b5b6000613518848285016134df565b91505092915050565b60008115159050919050565b61353681613521565b82525050565b6000602082019050613551600083018461352d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613591578082015181840152602081019050613576565b60008484015250505050565b6000601f19601f8301169050919050565b60006135b982613557565b6135c38185613562565b93506135d3818560208601613573565b6135dc8161359d565b840191505092915050565b6000602082019050818103600083015261360181846135ae565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061363482613609565b9050919050565b61364481613629565b811461364f57600080fd5b50565b6000813590506136618161363b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136a98261359d565b810181811067ffffffffffffffff821117156136c8576136c7613671565b5b80604052505050565b60006136db613488565b90506136e782826136a0565b919050565b600067ffffffffffffffff82111561370757613706613671565b5b6137108261359d565b9050602081019050919050565b82818337600083830152505050565b600061373f61373a846136ec565b6136d1565b90508281526020810184848401111561375b5761375a61366c565b5b61376684828561371d565b509392505050565b600082601f83011261378357613782613667565b5b813561379384826020860161372c565b91505092915050565b600080604083850312156137b3576137b2613492565b5b60006137c185828601613652565b925050602083013567ffffffffffffffff8111156137e2576137e1613497565b5b6137ee8582860161376e565b9150509250929050565b6000819050919050565b61380b816137f8565b82525050565b60006020820190506138266000830184613802565b92915050565b61383581613629565b82525050565b6000602082019050613850600083018461382c565b92915050565b6000819050919050565b61386981613856565b811461387457600080fd5b50565b60008135905061388681613860565b92915050565b6000602082840312156138a2576138a1613492565b5b60006138b084828501613877565b91505092915050565b6138c281613856565b82525050565b60006020820190506138dd60008301846138b9565b92915050565b6138ec81613521565b81146138f757600080fd5b50565b600081359050613909816138e3565b92915050565b6000806040838503121561392657613925613492565b5b600061393485828601613652565b9250506020613945858286016138fa565b9150509250929050565b613958816137f8565b811461396357600080fd5b50565b6000813590506139758161394f565b92915050565b6000806040838503121561399257613991613492565b5b60006139a085828601613652565b92505060206139b185828601613966565b9150509250929050565b600080604083850312156139d2576139d1613492565b5b60006139e085828601613877565b92505060206139f185828601613652565b9150509250929050565b600067ffffffffffffffff82169050919050565b613a18816139fb565b8114613a2357600080fd5b50565b600081359050613a3581613a0f565b92915050565b600080600060608486031215613a5457613a53613492565b5b6000613a62868287016138fa565b9350506020613a7386828701613a26565b9250506040613a8486828701613a26565b9150509250925092565b600060208284031215613aa457613aa3613492565b5b600082013567ffffffffffffffff811115613ac257613ac1613497565b5b613ace8482850161376e565b91505092915050565b613ae081613521565b82525050565b600060ff82169050919050565b613afc81613ae6565b82525050565b600063ffffffff82169050919050565b613b1b81613b02565b82525050565b613b2a816139fb565b82525050565b613b39816137f8565b82525050565b613b4881613629565b82525050565b613b5781613856565b82525050565b600082825260208201905092915050565b6000613b7982613557565b613b838185613b5d565b9350613b93818560208601613573565b613b9c8161359d565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613be757613be6613ba7565b5b50565b6000819050613bf882613bd6565b919050565b6000613c0882613bea565b9050919050565b613c1881613bfd565b82525050565b600061016083016000830151613c376000860182613ad7565b506020830151613c4a6020860182613af3565b506040830151613c5d6040860182613b12565b506060830151613c706060860182613b21565b506080830151613c836080860182613b21565b5060a0830151613c9660a0860182613b30565b5060c0830151613ca960c0860182613b3f565b5060e0830151613cbc60e0860182613b3f565b50610100830151613cd1610100860182613b4e565b50610120830151848203610120860152613ceb8282613b6e565b915050610140830151613d02610140860182613c0f565b508091505092915050565b60006020820190508181036000830152613d278184613c1e565b905092915050565b600080fd5b600080fd5b60008083601f840112613d4f57613d4e613667565b5b8235905067ffffffffffffffff811115613d6c57613d6b613d2f565b5b602083019150836001820283011115613d8857613d87613d34565b5b9250929050565b600080600080600060808688031215613dab57613daa613492565b5b600086013567ffffffffffffffff811115613dc957613dc8613497565b5b613dd588828901613d39565b95509550506020613de888828901613652565b9350506040613df988828901613652565b9250506060613e0a88828901613a26565b9150509295509295909350565b600080fd5b60006101608284031215613e3357613e32613e17565b5b81905092915050565b600060208284031215613e5257613e51613492565b5b600082013567ffffffffffffffff811115613e7057613e6f613497565b5b613e7c84828501613e1c565b91505092915050565b600060208284031215613e9b57613e9a613492565b5b6000613ea984828501613652565b91505092915050565b600060208284031215613ec857613ec7613492565b5b6000613ed684828501613966565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b613f1481613edf565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613f528383613b30565b60208301905092915050565b6000602082019050919050565b6000613f7682613f1a565b613f808185613f25565b9350613f8b83613f36565b8060005b83811015613fbc578151613fa38882613f46565b9750613fae83613f5e565b925050600181019050613f8f565b5085935050505092915050565b600060e082019050613fde600083018a613f0b565b8181036020830152613ff081896135ae565b9050818103604083015261400481886135ae565b90506140136060830187613802565b614020608083018661382c565b61402d60a08301856138b9565b81810360c083015261403f8184613f6b565b905098975050505050505050565b60008060006040848603121561406657614065613492565b5b600084013567ffffffffffffffff81111561408457614083613497565b5b61409086828701613d39565b935093505060206140a3868287016138fa565b9150509250925092565b60008083601f8401126140c3576140c2613667565b5b8235905067ffffffffffffffff8111156140e0576140df613d2f565b5b6020830191508360018202830111156140fc576140fb613d34565b5b9250929050565b60008083601f84011261411957614118613667565b5b8235905067ffffffffffffffff81111561413657614135613d2f565b5b60208301915083602082028301111561415257614151613d34565b5b9250929050565b600060a0828403121561416f5761416e613e17565b5b81905092915050565b6000806000806000806000610100888a03121561419857614197613492565b5b600088013567ffffffffffffffff8111156141b6576141b5613497565b5b6141c28a828b01613d39565b9750975050602088013567ffffffffffffffff8111156141e5576141e4613497565b5b6141f18a828b016140ad565b9550955050604088013567ffffffffffffffff81111561421457614213613497565b5b6142208a828b01614103565b935093505060606142338a828b01614159565b91505092959891949750929550565b60006040820190506142576000830185613802565b614264602083018461382c565b9392505050565b61427481613ae6565b811461427f57600080fd5b50565b6000813590506142918161426b565b92915050565b6000806000604084860312156142b0576142af613492565b5b600084013567ffffffffffffffff8111156142ce576142cd613497565b5b6142da86828701613d39565b935093505060206142ed86828701614282565b9150509250925092565b600060e0828403121561430d5761430c613e17565b5b81905092915050565b600080600080600060a0868803121561433257614331613492565b5b600061434088828901613652565b955050602061435188828901613652565b945050604061436288828901613652565b935050606061437388828901613652565b925050608086013567ffffffffffffffff81111561439457614393613497565b5b6143a0888289016142f7565b9150509295509295909350565b600080600080606085870312156143c7576143c6613492565b5b600085013567ffffffffffffffff8111156143e5576143e4613497565b5b6143f187828801613d39565b9450945050602061440487828801613a26565b925050604061441587828801613a26565b91505092959194509250565b6000806040838503121561443857614437613492565b5b600061444685828601613652565b925050602061445785828601613652565b9150509250929050565b61446a81613b02565b811461447557600080fd5b50565b60008135905061448781614461565b92915050565b6000806000604084860312156144a6576144a5613492565b5b600084013567ffffffffffffffff8111156144c4576144c3613497565b5b6144d086828701613d39565b935093505060206144e386828701614478565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061453457607f821691505b602082108103614547576145466144ed565b5b50919050565b6000604082019050614562600083018561382c565b818103602083015261457481846135ae565b90509392505050565b60008151905061458c8161394f565b92915050565b6000602082840312156145a8576145a7613492565b5b60006145b68482850161457d565b91505092915050565b60006040820190506145d4600083018561382c565b6145e1602083018461352d565b9392505050565b7f496e76616c696420746f6b656e20494400000000000000000000000000000000600082015250565b600061461e601083613562565b9150614629826145e8565b602082019050919050565b6000602082019050818103600083015261464d81614611565b9050919050565b6000606082019050614669600083018661382c565b614676602083018561382c565b6146836040830184613802565b949350505050565b60006060820190506146a0600083018661382c565b6146ad6020830185613802565b6146ba604083018461382c565b949350505050565b6146cb816139fb565b82525050565b60006060820190506146e6600083018661352d565b6146f360208301856146c2565b61470060408301846146c2565b949350505050565b600080fd5b600080fd5b600081519050614721816138e3565b92915050565b6000815190506147368161426b565b92915050565b60008151905061474b81614461565b92915050565b60008151905061476081613a0f565b92915050565b6000815190506147758161363b565b92915050565b60008151905061478a81613860565b92915050565b60006147a361479e846136ec565b6136d1565b9050828152602081018484840111156147bf576147be61366c565b5b6147ca848285613573565b509392505050565b600082601f8301126147e7576147e6613667565b5b81516147f7848260208601614790565b91505092915050565b6002811061480d57600080fd5b50565b60008151905061481f81614800565b92915050565b6000610160828403121561483c5761483b614708565b5b6148476101606136d1565b9050600061485784828501614712565b600083015250602061486b84828501614727565b602083015250604061487f8482850161473c565b604083015250606061489384828501614751565b60608301525060806148a784828501614751565b60808301525060a06148bb8482850161457d565b60a08301525060c06148cf84828501614766565b60c08301525060e06148e384828501614766565b60e0830152506101006148f88482850161477b565b6101008301525061012082015167ffffffffffffffff81111561491e5761491d61470d565b5b61492a848285016147d2565b6101208301525061014061494084828501614810565b6101408301525092915050565b60006020828403121561496357614962613492565b5b600082015167ffffffffffffffff81111561498157614980613497565b5b61498d84828501614825565b91505092915050565b60006149a28385613562565b93506149af83858461371d565b6149b88361359d565b840190509392505050565b6000819050919050565b60006149e86149e36149de846139fb565b6149c3565b6137f8565b9050919050565b6149f8816149cd565b82525050565b60006080820190508181036000830152614a19818789614996565b9050614a28602083018661382c565b614a35604083018561382c565b614a4260608301846149ef565b9695505050505050565b6000614a5b60208401846138fa565b905092915050565b6000614a726020840184614282565b905092915050565b6000614a896020840184614478565b905092915050565b6000614aa06020840184613a26565b905092915050565b6000614ab76020840184613966565b905092915050565b6000614ace6020840184613652565b905092915050565b6000614ae56020840184613877565b905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112614b1957614b18614af7565b5b83810192508235915060208301925067ffffffffffffffff821115614b4157614b40614aed565b5b600182023603831315614b5757614b56614af2565b5b509250929050565b6000614b6b8385613b5d565b9350614b7883858461371d565b614b818361359d565b840190509392505050565b600081359050614b9b81614800565b92915050565b6000614bb06020840184614b8c565b905092915050565b60006101608301614bcc6000840184614a4c565b614bd96000860182613ad7565b50614be76020840184614a63565b614bf46020860182613af3565b50614c026040840184614a7a565b614c0f6040860182613b12565b50614c1d6060840184614a91565b614c2a6060860182613b21565b50614c386080840184614a91565b614c456080860182613b21565b50614c5360a0840184614aa8565b614c6060a0860182613b30565b50614c6e60c0840184614abf565b614c7b60c0860182613b3f565b50614c8960e0840184614abf565b614c9660e0860182613b3f565b50614ca5610100840184614ad6565b614cb3610100860182613b4e565b50614cc2610120840184614afc565b858303610120870152614cd6838284614b5f565b92505050614ce8610140840184614ba1565b614cf6610140860182613c0f565b508091505092915050565b60006020820190508181036000830152614d1b8184614bb8565b905092915050565b7f4549503731323a20556e696e697469616c697a65640000000000000000000000600082015250565b6000614d59601583613562565b9150614d6482614d23565b602082019050919050565b60006020820190508181036000830152614d8881614d4c565b9050919050565b60006040820190508181036000830152614daa818587614996565b9050614db9602083018461352d565b949350505050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000614dec8385614dc1565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614e1f57614e1e614dd2565b5b602083029250614e30838584614dd7565b82840190509392505050565b600082825260208201905092915050565b6000614e598385614e3c565b9350614e6683858461371d565b614e6f8361359d565b840190509392505050565b60a08201614e8b6000830183614aa8565b614e986000850182613b30565b50614ea66020830183614aa8565b614eb36020850182613b30565b50614ec16040830183614aa8565b614ece6040850182613b30565b50614edc6060830183614aa8565b614ee96060850182613b30565b50614ef76080830183614abf565b614f046080850182613b3f565b50505050565b6000610100820190508181036000830152614f2681898b614996565b90508181036020830152614f3b818789614de0565b90508181036040830152614f50818587614e4d565b9050614f5f6060830184614e7a565b98975050505050505050565b60006020820190508181036000830152614f86818486614996565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614fc9826137f8565b9150614fd4836137f8565b9250828202614fe2816137f8565b91508282048414831517614ff957614ff8614f8f565b5b5092915050565b60006020828403121561501657615015613492565b5b600061502484828501614712565b91505092915050565b7f5472616e73666572204552433230206661696c65640000000000000000000000600082015250565b6000615063601583613562565b915061506e8261502d565b602082019050919050565b6000602082019050818103600083015261509281615056565b9050919050565b7f496e636f7272656374206e6174697665207061796d656e7420616d6f756e7400600082015250565b60006150cf601f83613562565b91506150da82615099565b602082019050919050565b600060208201905081810360008301526150fe816150c2565b9050919050565b61510e81613ae6565b82525050565b6000604082019050818103600083015261512f818587614996565b905061513e6020830184615105565b949350505050565b600080fd5b600080fd5b600080fd5b60008235600160800383360303811261517157615170615146565b5b80830191505092915050565b6000813561518a8161363b565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6151c084615193565b9350801983169250808416831791505092915050565b60006151f16151ec6151e784613609565b6149c3565b613609565b9050919050565b6000615203826151d6565b9050919050565b6000615215826151f8565b9050919050565b6000819050919050565b61522f8261520a565b61524261523b8261521c565b83546151a0565b8255505050565b6000808335600160200384360303811261526657615265615146565b5b80840192508235915067ffffffffffffffff8211156152885761528761514b565b5b6020830192506020820236038313156152a4576152a3615150565b5b509250929050565b600081549050919050565b60008190506001806001038301049050919050565b60008190508160005260206000209050919050565b600082821b905092915050565b60006008830261531e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826152e1565b61532886836152e1565b95508019841693508086168417925050509392505050565b600061535b615356615351846137f8565b6149c3565b6137f8565b9050919050565b6000819050919050565b61537583615340565b61538961538182615362565b8484546152ee565b825550505050565b600090565b61539e615391565b6153a981848461536c565b505050565b5b818110156153cd576153c2600082615396565b6001810190506153af565b5050565b600082821c905092915050565b81831015615417576153ef826152b7565b6153f8846152b7565b615401836152cc565b81810183820161541181836153ae565b50505050505b505050565b6801000000000000000082111561543657615435613671565b5b61543f816152ac565b82825561544d8382846153de565b505050565b600082905092915050565b6000813561546a8161394f565b80915050919050565b6000819050919050565b6154878383615452565b67ffffffffffffffff8111156154a05761549f613671565b5b6154aa818361541c565b6154b383615473565b6154bc836152cc565b6001830460005b818110156154fb5760006154d68561545d565b6154df81615362565b80925060208701965050508082850155506001810190506154c3565b5050505050505050565b61551083838361547d565b505050565b6000808335600160200384360303811261553257615531615146565b5b80840192508235915067ffffffffffffffff8211156155545761555361514b565b5b6020830192506020820236038313156155705761556f615150565b5b509250929050565b600081549050919050565b60008190506001806001038301049050919050565b60008190508160005260206000209050919050565b5b818110156155cc576155c1600082615396565b6001810190506155ae565b5050565b81831015615609576155e182615583565b6155ea84615583565b6155f383615598565b81810183820161560381836155ad565b50505050505b505050565b6801000000000000000082111561562857615627613671565b5b61563181615578565b82825561563f8382846155d0565b505050565b600082905092915050565b6000819050919050565b6156638383615644565b67ffffffffffffffff81111561567c5761567b613671565b5b615686818361560e565b61568f8361564f565b61569883615598565b6001830460005b818110156156d75760006156b28561517d565b6156bb8161521c565b809250602087019650505080828501555060018101905061569f565b5050505050505050565b6156ec838383615659565b505050565b6000810160008301806157038161517d565b905061570f8184615226565b50505060018101602083016157248185615249565b61572f818386615505565b5050505060028101604083016157458185615515565b6157508183866156e1565b5050505060038101606083016157668185615249565b615771818386615505565b505050505050565b61578382826156f1565b5050565b600080833560016020038436030381126157a4576157a3615146565b5b80840192508235915067ffffffffffffffff8211156157c6576157c561514b565b5b6020830192506001820236038313156157e2576157e1615150565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b5b818110156158395761582e600082615396565b60018101905061581b565b5050565b601f82111561587e5761584f816157f5565b6158588461580a565b81016020851015615867578190505b61587b6158738561580a565b83018261581a565b50505b505050565b6000615894600019846008026153d1565b1980831691505092915050565b60006158ad8383615883565b9150826002028217905092915050565b6158c783836157ea565b67ffffffffffffffff8111156158e0576158df613671565b5b6158ea825461451c565b6158f582828561583d565b6000601f8311600181146159245760008415615912578287013590505b61591c85826158a1565b865550615984565b601f198416615932866157f5565b60005b8281101561595a57848901358255600182019150602085019450602081019050615935565b868310156159775784890135615973601f891682615883565b8355505b6001600288020188555050505b50505050505050565b6000819050919050565b60006159b26159ad6159a88461598d565b6149c3565b6139fb565b9050919050565b6159c281615997565b82525050565b60006020820190506159dd60008301846159b9565b92915050565b60006159ee826137f8565b91506159f9836137f8565b9250828203905081811115615a1157615a10614f8f565b5b92915050565b6000615a22826137f8565b9150615a2d836137f8565b9250828201905080821115615a4557615a44614f8f565b5b92915050565b60006060820190508181036000830152615a66818688614996565b9050615a7560208301856146c2565b615a8260408301846146c2565b95945050505050565b615a9481613b02565b82525050565b60006040820190508181036000830152615ab5818587614996565b9050615ac46020830184615a8b565b949350505050565b6000604082019050615ae1600083018561382c565b615aee6020830184613802565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050615b39600083018561382c565b615b4660208301846138b9565b9392505050565b6000819050919050565b615b68615b63826137f8565b615b4d565b82525050565b60008160601b9050919050565b6000615b8682615b6e565b9050919050565b6000615b9882615b7b565b9050919050565b615bb0615bab82613629565b615b8d565b82525050565b6000615bc28286615b57565b602082019150615bd28285615b57565b602082019150615be28284615b9f565b601482019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615c2d826137f8565b9150615c38836137f8565b925082615c4857615c47615bf3565b5b828206905092915050565b6000615c5e826137f8565b915060008203615c7157615c70614f8f565b5b600182039050919050565b6000606082019050615c916000830186613802565b615c9e602083018561382c565b615cab6040830184613802565b949350505050565b600060208284031215615cc957615cc8613492565b5b6000615cd784828501614766565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000615d188383613b3f565b60208301905092915050565b6000602082019050919050565b6000615d3c82615ce0565b615d468185615ceb565b9350615d5183615cfc565b8060005b83811015615d82578151615d698882615d0c565b9750615d7483615d24565b925050600181019050615d55565b5085935050505092915050565b600081519050919050565b6000615da582615d8f565b615daf8185614e3c565b9350615dbf818560208601613573565b615dc88161359d565b840191505092915050565b600061010082019050615de9600083018b61382c565b8181036020830152615dfb818a615d31565b90508181036040830152615e0f8189613f6b565b9050615e1e606083018861382c565b8181036080830152615e308187615d9a565b9050615e3f60a0830186613802565b615e4c60c0830185615a8b565b615e5960e0830184615a8b565b9998505050505050505050565b615e6f82613557565b67ffffffffffffffff811115615e8857615e87613671565b5b615e92825461451c565b615e9d82828561583d565b600060209050601f831160018114615ed05760008415615ebe578287015190505b615ec885826158a1565b865550615f30565b601f198416615ede866157f5565b60005b82811015615f0657848901518255600182019150602085019450602081019050615ee1565b86831015615f235784890151615f1f601f891682615883565b8355505b6001600288020188555050505b50505050505056fea26469706673582212201316dfe0e81987e3fdbd4f70a340f650890b034be886554b8a327e700f63e34464736f6c634300081a0033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80636f8b44b01161012e578063aa4daf24116100ab578063d547741f1161006f578063d547741f14610891578063d5abeb01146108ba578063d8952a49146108e5578063e32e2bbc1461090e578063e58378bb146109375761023b565b8063aa4daf24146107bc578063b67f21be146107ed578063b921379914610816578063ce617ce51461083f578063d4aa8d6f146108685761023b565b806391d14854116100f257806391d14854146106c35780639fe78f7914610700578063a217fddf1461073d578063a5f5a4a814610768578063a95feefe146107915761023b565b80636f8b44b0146105e85780637f5866041461061157806384b0196e1461063c5780638e7d25a81461066d5780639035e5a6146106985761023b565b806336568abe116101bc5780635a9baebd116101805780635a9baebd1461051757806362f42822146105405780636508b10a1461056957806365165aa5146105945780636c19e783146105bf5761023b565b806336568abe1461043257806341c782c51461045b5780634899cf0b146104865780634b6d9411146104af5780634d73cbd5146104da5761023b565b80631fda9a02116102035780631fda9a021461033b578063248a9ca31461036657806328c1a4f5146103a3578063290c292d146103cc5780632f2ff15d146104095761023b565b806301ffc9a7146102405780630f9f6cbd1461027d5780630fbe291a146102a857806312c4ce88146102e557806318160ddd14610310575b600080fd5b34801561024c57600080fd5b50610267600480360381019061026291906134f4565b610962565b604051610274919061353c565b60405180910390f35b34801561028957600080fd5b506102926109dc565b60405161029f91906135e7565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca919061379c565b610a6a565b6040516102dc9190613811565b60405180910390f35b3480156102f157600080fd5b506102fa610b12565b604051610307919061383b565b60405180910390f35b34801561031c57600080fd5b50610325610b38565b6040516103329190613811565b60405180910390f35b34801561034757600080fd5b50610350610bd0565b60405161035d919061383b565b60405180910390f35b34801561037257600080fd5b5061038d6004803603810190610388919061388c565b610bf4565b60405161039a91906138c8565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c5919061390f565b610c22565b005b3480156103d857600080fd5b506103f360048036038101906103ee919061397b565b610ce0565b604051610400919061383b565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b91906139bb565b610ea8565b005b34801561043e57600080fd5b50610459600480360381019061045491906139bb565b610eca565b005b34801561046757600080fd5b50610470610f45565b60405161047d919061383b565b60405180910390f35b34801561049257600080fd5b506104ad60048036038101906104a89190613a3b565b610f6b565b005b3480156104bb57600080fd5b506104c461102c565b6040516104d19190613811565b60405180910390f35b3480156104e657600080fd5b5061050160048036038101906104fc9190613a8e565b611032565b60405161050e9190613d0d565b60405180910390f35b34801561052357600080fd5b5061053e60048036038101906105399190613d8f565b6110e2565b005b34801561054c57600080fd5b5061056760048036038101906105629190613e3c565b6111a9565b005b34801561057557600080fd5b5061057e611379565b60405161058b9190613811565b60405180910390f35b3480156105a057600080fd5b506105a961137f565b6040516105b6919061383b565b60405180910390f35b3480156105cb57600080fd5b506105e660048036038101906105e19190613e85565b6113a5565b005b3480156105f457600080fd5b5061060f600480360381019061060a9190613eb2565b611463565b005b34801561061d57600080fd5b50610626611519565b604051610633919061383b565b60405180910390f35b34801561064857600080fd5b5061065161153f565b6040516106649796959493929190613fc9565b60405180910390f35b34801561067957600080fd5b50610682611651565b60405161068f919061383b565b60405180910390f35b3480156106a457600080fd5b506106ad61167d565b6040516106ba919061383b565b60405180910390f35b3480156106cf57600080fd5b506106ea60048036038101906106e591906139bb565b6116a3565b6040516106f7919061353c565b60405180910390f35b34801561070c57600080fd5b5061072760048036038101906107229190613a8e565b61171c565b6040516107349190613811565b60405180910390f35b34801561074957600080fd5b506107526117c1565b60405161075f91906138c8565b60405180910390f35b34801561077457600080fd5b5061078f600480360381019061078a919061404d565b6117c8565b005b34801561079d57600080fd5b506107a6611889565b6040516107b391906138c8565b60405180910390f35b6107d660048036038101906107d19190614178565b61188f565b6040516107e4929190614242565b60405180910390f35b3480156107f957600080fd5b50610814600480360381019061080f9190614297565b611cd1565b005b34801561082257600080fd5b5061083d60048036038101906108389190614316565b611d92565b005b34801561084b57600080fd5b5061086660048036038101906108619190613eb2565b6121ea565b005b34801561087457600080fd5b5061088f600480360381019061088a91906143ad565b612375565b005b34801561089d57600080fd5b506108b860048036038101906108b391906139bb565b612439565b005b3480156108c657600080fd5b506108cf61245b565b6040516108dc9190613811565b60405180910390f35b3480156108f157600080fd5b5061090c60048036038101906109079190614421565b6124f3565b005b34801561091a57600080fd5b506109356004803603810190610930919061448d565b612586565b005b34801561094357600080fd5b5061094c61281d565b60405161095991906138c8565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109d557506109d482612841565b5b9050919050565b600a80546109e99061451c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a159061451c565b8015610a625780601f10610a3757610100808354040283529160200191610a62565b820191906000526020600020905b815481529060010190602001808311610a4557829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630fbe291a84846040518363ffffffff1660e01b8152600401610ac992919061454d565b602060405180830381865afa158015610ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0a9190614592565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190614592565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610bff6128ab565b905080600001600084815260200190815260200160002060010154915050919050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e610c4c816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328c1a4f584846040518363ffffffff1660e01b8152600401610ca99291906145bf565b600060405180830381600087803b158015610cc357600080fd5b505af1158015610cd7573d6000803e3d6000fd5b50505050505050565b60008060001b610cef816128d3565b60008314158015610d025750600e548311155b610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3890614634565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317d13a2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dab57600080fd5b505af1158015610dbf573d6000803e3d6000fd5b505050506000610dce846128e7565b809450819250505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3087876040518463ffffffff1660e01b8152600401610e3393929190614654565b600060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b505050507f89a2c92e65780856b461f06435fffd0fb445240ba3cfee7e8f18e01dca40c073858585604051610e989392919061468b565b60405180910390a1505092915050565b610eb182610bf4565b610eba816128d3565b610ec48383612ad0565b50505050565b610ed2612bd1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f36576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f408282612bd9565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e610f95816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634899cf0b8585856040518463ffffffff1660e01b8152600401610ff4939291906146d1565b600060405180830381600087803b15801561100e57600080fd5b505af1158015611022573d6000803e3d6000fd5b5050505050505050565b600e5481565b61103a613343565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d73cbd5836040518263ffffffff1660e01b815260040161109591906135e7565b600060405180830381865afa1580156110b2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110db919061494d565b9050919050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61110c816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fb5656a87878787876040518663ffffffff1660e01b815260040161116f9594939291906149fe565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b50505050505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6111d3816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362f42822836040518263ffffffff1660e01b815260040161122e9190614d01565b600060405180830381600087803b15801561124857600080fd5b505af115801561125c573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f39190614592565b9050600c600061130391906133fd565b8067ffffffffffffffff81111561131d5761131c613671565b5b60405190808252806020026020018201604052801561134b5781602001602082028036833780820191505090505b50600c908051906020019061136192919061341e565b5080600d81905550611374600e54612cdb565b505050565b600f5481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6113cf816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328c1a4f58360016040518363ffffffff1660e01b815260040161142d9291906145bf565b600060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61148d816128d3565b61149682612d45565b600c60006114a491906133fd565b8167ffffffffffffffff8111156114be576114bd613671565b5b6040519080825280602002602001820160405280156114ec5781602001602082028036833780820191505090505b50600c908051906020019061150292919061341e565b5081600d81905550611515600e54612cdb565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606080600080600060606000611555612dd5565b90506000801b816000015414801561157357506000801b8160010154145b6115b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a990614d6f565b60405180910390fd5b6115ba612dfd565b6115c2612e9e565b46306000801b600067ffffffffffffffff8111156115e3576115e2613671565b5b6040519080825280602002602001820160405280156116115781602001602082028036833780820191505090505b507f0f0000000000000000000000000000000000000000000000000000000000000095949392919097509750975097509750975097505090919293949596565b60068060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806116ae6128ab565b905080600001600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639fe78f79836040518263ffffffff1660e01b815260040161177991906135e7565b602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba9190614592565b9050919050565b6000801b81565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6117f2816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5f5a4a88585856040518463ffffffff1660e01b815260040161185193929190614d8f565b600060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b5050505050505050565b600b5481565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663832f9f548b8b89898d8d8b6040518863ffffffff1660e01b81526004016118fb9796959493929190614f0a565b6020604051808303816000875af115801561191a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193e9190614592565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d73cbd58c8c6040518363ffffffff1660e01b815260040161199f929190614f6b565b600060405180830381865afa1580156119bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119e5919061494d565b905060008160a0015114611ba557600073ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff1614611b06578060c0015173ffffffffffffffffffffffffffffffffffffffff166323b872dd338360e00151858560a00151611a619190614fbe565b6040518463ffffffff1660e01b8152600401611a7f93929190614654565b6020604051808303816000875af1158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac29190615000565b611b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af890615079565b60405180910390fd5b611ba4565b818160a00151611b169190614fbe565b341015611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f906150e5565b60405180910390fd5b8060e0015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611ba2573d6000803e3d6000fd5b505b5b60005b82811015611c7557611bba60006128e7565b809550819650505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30886080016020810190611c129190613e85565b886040518463ffffffff1660e01b8152600401611c3193929190614654565b600060405180830381600087803b158015611c4b57600080fd5b505af1158015611c5f573d6000803e3d6000fd5b5050505084600f81905550806001019050611ba8565b507f89a2c92e65780856b461f06435fffd0fb445240ba3cfee7e8f18e01dca40c073856080016020810190611caa9190613e85565b8585604051611cbb9392919061468b565b60405180910390a1505097509795505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e611cfb816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b67f21be8585856040518463ffffffff1660e01b8152600401611d5a93929190615114565b600060405180830381600087803b158015611d7457600080fd5b505af1158015611d88573d6000803e3d6000fd5b5050505050505050565b6000611d9c612f3f565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015611dea5750825b9050600060018367ffffffffffffffff16148015611e1f575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611e2d575080155b15611e64576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315611eb45760018560000160086101000a81548160ff0219169083151502179055505b611f286040518060400160405280600781526020017f4f4b584d696e74000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250612f67565b611f30612f7d565b611f3d6000801b8b612ad0565b50611f687fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8a612ad0565b50876000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858060000190611ffa9190615155565b600681816120089190615779565b90505085602001602081019061201e9190613e85565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560400160208101906120719190613e85565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560600160208101906120c49190613e85565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560800160208101906121179190613e85565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858060a001906121679190615787565b600a91826121769291906158bd565b508560c00135600b8190555083156121de5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516121d591906159c8565b60405180910390a15b50505050505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e612214816128d3565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190614592565b9050600e54816122b791906159e3565b905082816122c59190615a17565b90506122d081612d45565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa15801561233d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123619190614592565b600d8190555061237083612cdb565b505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61239f816128d3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4aa8d6f868686866040518563ffffffff1660e01b81526004016124009493929190615a4b565b600060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050505050505050565b61244282610bf4565b61244b816128d3565b6124558383612bd9565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ee9190614592565b905090565b6000801b612500816128d3565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6125b0816128d3565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa15801561261f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126439190614592565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e32e2bbc8686866040518463ffffffff1660e01b81526004016126a493929190615a9a565b600060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa158015612745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127699190614592565b9050818161277791906159e3565b90508363ffffffff168161278b9190615a17565b905061279681612d45565b600c60006127a491906133fd565b8067ffffffffffffffff8111156127be576127bd613671565b5b6040519080825280602002602001820160405280156127ec5781602001602082028036833780820191505090505b50600c908051906020019061280292919061341e565b5080600d81905550612815600e54612cdb565b505050505050565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b6128e4816128df612bd1565b612f87565b50565b600080600083146128fa57829150612905565b612902612fd8565b91505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a144819430846040518363ffffffff1660e01b8152600401612960929190615acc565b600060405180830381600087803b15801561297a57600080fd5b505af115801561298e573d6000803e3d6000fd5b5050505060006006600201805480602002602001604051908101604052809291908181526020018280548015612a1957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116129cf575b5050505050905060006006600301805480602002602001604051908101604052809291908181526020018280548015612a7157602002820191906000526020600020905b815481526020019060010190808311612a5d575b50505050509050612a8484600b5461311d565b9250612ac98383600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518060200160405280600081525060008060006131e9565b5050915091565b600080612adb6128ab565b9050612ae784846116a3565b612bc557600181600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612b61612bd1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050612bcb565b60009150505b92915050565b600033905090565b600080612be46128ab565b9050612bf084846116a3565b15612ccf57600081600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612c6b612bd1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050612cd5565b60009150505b92915050565b80600e8190555060005b81811015612d285780600d54612cfb91906159e3565b600c8281548110612d0f57612d0e615af5565b5b9060005260206000200181905550806001019050612ce5565b5080600d6000828254612d3b91906159e3565b9250508190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f8b44b0826040518263ffffffff1660e01b8152600401612da09190613811565b600060405180830381600087803b158015612dba57600080fd5b505af1158015612dce573d6000803e3d6000fd5b5050505050565b60007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100905090565b60606000612e09612dd5565b9050806002018054612e1a9061451c565b80601f0160208091040260200160405190810160405280929190818152602001828054612e469061451c565b8015612e935780601f10612e6857610100808354040283529160200191612e93565b820191906000526020600020905b815481529060010190602001808311612e7657829003601f168201915b505050505091505090565b60606000612eaa612dd5565b9050806003018054612ebb9061451c565b80601f0160208091040260200160405190810160405280929190818152602001828054612ee79061451c565b8015612f345780601f10612f0957610100808354040283529160200191612f34565b820191906000526020600020905b815481529060010190602001808311612f1757829003601f168201915b505050505091505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612f6f61328e565b612f7982826132ce565b5050565b612f8561328e565b565b612f9182826116a3565b612fd45780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401612fcb929190615b24565b60405180910390fd5b5050565b600080600d54424433604051602001612ff393929190615bb6565b6040516020818303038152906040528051906020012060001c6130169190615c22565b9050600080600c838154811061302f5761302e615af5565b5b90600052602060002001541461306357600c828154811061305357613052615af5565b5b9060005260206000200154613071565b6001826130709190615a17565b5b90506000600c6001600d5461308691906159e3565b8154811061309757613096615af5565b5b9060005260206000200154146130d957600c6001600d546130b891906159e3565b815481106130c9576130c8615af5565b5b90600052602060002001546130dd565b600d545b600c83815481106130f1576130f0615af5565b5b9060005260206000200181905550600d6000815461310e90615c53565b91905081905550809250505090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca247ac4660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b815260040161319e93929190615c7c565b6020604051808303816000875af11580156131bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e19190615cb3565b905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a4d56c58989888a898989896040518963ffffffff1660e01b8152600401613252989796959493929190615dd3565b600060405180830381600087803b15801561326c57600080fd5b505af1158015613280573d6000803e3d6000fd5b505050505050505050505050565b613296613323565b6132cc576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6132d661328e565b60006132e0612dd5565b9050828160020190816132f39190615e66565b50818160030190816133059190615e66565b506000801b81600001819055506000801b8160010181905550505050565b600061332d612f3f565b60000160089054906101000a900460ff16905090565b604051806101600160405280600015158152602001600060ff168152602001600063ffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160608152602001600060018111156133f7576133f6613ba7565b5b81525090565b508054600082559060005260206000209081019061341b919061346b565b50565b82805482825590600052602060002090810192821561345a579160200282015b8281111561345957825182559160200191906001019061343e565b5b509050613467919061346b565b5090565b5b8082111561348457600081600090555060010161346c565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6134d18161349c565b81146134dc57600080fd5b50565b6000813590506134ee816134c8565b92915050565b60006020828403121561350a57613509613492565b5b6000613518848285016134df565b91505092915050565b60008115159050919050565b61353681613521565b82525050565b6000602082019050613551600083018461352d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613591578082015181840152602081019050613576565b60008484015250505050565b6000601f19601f8301169050919050565b60006135b982613557565b6135c38185613562565b93506135d3818560208601613573565b6135dc8161359d565b840191505092915050565b6000602082019050818103600083015261360181846135ae565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061363482613609565b9050919050565b61364481613629565b811461364f57600080fd5b50565b6000813590506136618161363b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136a98261359d565b810181811067ffffffffffffffff821117156136c8576136c7613671565b5b80604052505050565b60006136db613488565b90506136e782826136a0565b919050565b600067ffffffffffffffff82111561370757613706613671565b5b6137108261359d565b9050602081019050919050565b82818337600083830152505050565b600061373f61373a846136ec565b6136d1565b90508281526020810184848401111561375b5761375a61366c565b5b61376684828561371d565b509392505050565b600082601f83011261378357613782613667565b5b813561379384826020860161372c565b91505092915050565b600080604083850312156137b3576137b2613492565b5b60006137c185828601613652565b925050602083013567ffffffffffffffff8111156137e2576137e1613497565b5b6137ee8582860161376e565b9150509250929050565b6000819050919050565b61380b816137f8565b82525050565b60006020820190506138266000830184613802565b92915050565b61383581613629565b82525050565b6000602082019050613850600083018461382c565b92915050565b6000819050919050565b61386981613856565b811461387457600080fd5b50565b60008135905061388681613860565b92915050565b6000602082840312156138a2576138a1613492565b5b60006138b084828501613877565b91505092915050565b6138c281613856565b82525050565b60006020820190506138dd60008301846138b9565b92915050565b6138ec81613521565b81146138f757600080fd5b50565b600081359050613909816138e3565b92915050565b6000806040838503121561392657613925613492565b5b600061393485828601613652565b9250506020613945858286016138fa565b9150509250929050565b613958816137f8565b811461396357600080fd5b50565b6000813590506139758161394f565b92915050565b6000806040838503121561399257613991613492565b5b60006139a085828601613652565b92505060206139b185828601613966565b9150509250929050565b600080604083850312156139d2576139d1613492565b5b60006139e085828601613877565b92505060206139f185828601613652565b9150509250929050565b600067ffffffffffffffff82169050919050565b613a18816139fb565b8114613a2357600080fd5b50565b600081359050613a3581613a0f565b92915050565b600080600060608486031215613a5457613a53613492565b5b6000613a62868287016138fa565b9350506020613a7386828701613a26565b9250506040613a8486828701613a26565b9150509250925092565b600060208284031215613aa457613aa3613492565b5b600082013567ffffffffffffffff811115613ac257613ac1613497565b5b613ace8482850161376e565b91505092915050565b613ae081613521565b82525050565b600060ff82169050919050565b613afc81613ae6565b82525050565b600063ffffffff82169050919050565b613b1b81613b02565b82525050565b613b2a816139fb565b82525050565b613b39816137f8565b82525050565b613b4881613629565b82525050565b613b5781613856565b82525050565b600082825260208201905092915050565b6000613b7982613557565b613b838185613b5d565b9350613b93818560208601613573565b613b9c8161359d565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613be757613be6613ba7565b5b50565b6000819050613bf882613bd6565b919050565b6000613c0882613bea565b9050919050565b613c1881613bfd565b82525050565b600061016083016000830151613c376000860182613ad7565b506020830151613c4a6020860182613af3565b506040830151613c5d6040860182613b12565b506060830151613c706060860182613b21565b506080830151613c836080860182613b21565b5060a0830151613c9660a0860182613b30565b5060c0830151613ca960c0860182613b3f565b5060e0830151613cbc60e0860182613b3f565b50610100830151613cd1610100860182613b4e565b50610120830151848203610120860152613ceb8282613b6e565b915050610140830151613d02610140860182613c0f565b508091505092915050565b60006020820190508181036000830152613d278184613c1e565b905092915050565b600080fd5b600080fd5b60008083601f840112613d4f57613d4e613667565b5b8235905067ffffffffffffffff811115613d6c57613d6b613d2f565b5b602083019150836001820283011115613d8857613d87613d34565b5b9250929050565b600080600080600060808688031215613dab57613daa613492565b5b600086013567ffffffffffffffff811115613dc957613dc8613497565b5b613dd588828901613d39565b95509550506020613de888828901613652565b9350506040613df988828901613652565b9250506060613e0a88828901613a26565b9150509295509295909350565b600080fd5b60006101608284031215613e3357613e32613e17565b5b81905092915050565b600060208284031215613e5257613e51613492565b5b600082013567ffffffffffffffff811115613e7057613e6f613497565b5b613e7c84828501613e1c565b91505092915050565b600060208284031215613e9b57613e9a613492565b5b6000613ea984828501613652565b91505092915050565b600060208284031215613ec857613ec7613492565b5b6000613ed684828501613966565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b613f1481613edf565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613f528383613b30565b60208301905092915050565b6000602082019050919050565b6000613f7682613f1a565b613f808185613f25565b9350613f8b83613f36565b8060005b83811015613fbc578151613fa38882613f46565b9750613fae83613f5e565b925050600181019050613f8f565b5085935050505092915050565b600060e082019050613fde600083018a613f0b565b8181036020830152613ff081896135ae565b9050818103604083015261400481886135ae565b90506140136060830187613802565b614020608083018661382c565b61402d60a08301856138b9565b81810360c083015261403f8184613f6b565b905098975050505050505050565b60008060006040848603121561406657614065613492565b5b600084013567ffffffffffffffff81111561408457614083613497565b5b61409086828701613d39565b935093505060206140a3868287016138fa565b9150509250925092565b60008083601f8401126140c3576140c2613667565b5b8235905067ffffffffffffffff8111156140e0576140df613d2f565b5b6020830191508360018202830111156140fc576140fb613d34565b5b9250929050565b60008083601f84011261411957614118613667565b5b8235905067ffffffffffffffff81111561413657614135613d2f565b5b60208301915083602082028301111561415257614151613d34565b5b9250929050565b600060a0828403121561416f5761416e613e17565b5b81905092915050565b6000806000806000806000610100888a03121561419857614197613492565b5b600088013567ffffffffffffffff8111156141b6576141b5613497565b5b6141c28a828b01613d39565b9750975050602088013567ffffffffffffffff8111156141e5576141e4613497565b5b6141f18a828b016140ad565b9550955050604088013567ffffffffffffffff81111561421457614213613497565b5b6142208a828b01614103565b935093505060606142338a828b01614159565b91505092959891949750929550565b60006040820190506142576000830185613802565b614264602083018461382c565b9392505050565b61427481613ae6565b811461427f57600080fd5b50565b6000813590506142918161426b565b92915050565b6000806000604084860312156142b0576142af613492565b5b600084013567ffffffffffffffff8111156142ce576142cd613497565b5b6142da86828701613d39565b935093505060206142ed86828701614282565b9150509250925092565b600060e0828403121561430d5761430c613e17565b5b81905092915050565b600080600080600060a0868803121561433257614331613492565b5b600061434088828901613652565b955050602061435188828901613652565b945050604061436288828901613652565b935050606061437388828901613652565b925050608086013567ffffffffffffffff81111561439457614393613497565b5b6143a0888289016142f7565b9150509295509295909350565b600080600080606085870312156143c7576143c6613492565b5b600085013567ffffffffffffffff8111156143e5576143e4613497565b5b6143f187828801613d39565b9450945050602061440487828801613a26565b925050604061441587828801613a26565b91505092959194509250565b6000806040838503121561443857614437613492565b5b600061444685828601613652565b925050602061445785828601613652565b9150509250929050565b61446a81613b02565b811461447557600080fd5b50565b60008135905061448781614461565b92915050565b6000806000604084860312156144a6576144a5613492565b5b600084013567ffffffffffffffff8111156144c4576144c3613497565b5b6144d086828701613d39565b935093505060206144e386828701614478565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061453457607f821691505b602082108103614547576145466144ed565b5b50919050565b6000604082019050614562600083018561382c565b818103602083015261457481846135ae565b90509392505050565b60008151905061458c8161394f565b92915050565b6000602082840312156145a8576145a7613492565b5b60006145b68482850161457d565b91505092915050565b60006040820190506145d4600083018561382c565b6145e1602083018461352d565b9392505050565b7f496e76616c696420746f6b656e20494400000000000000000000000000000000600082015250565b600061461e601083613562565b9150614629826145e8565b602082019050919050565b6000602082019050818103600083015261464d81614611565b9050919050565b6000606082019050614669600083018661382c565b614676602083018561382c565b6146836040830184613802565b949350505050565b60006060820190506146a0600083018661382c565b6146ad6020830185613802565b6146ba604083018461382c565b949350505050565b6146cb816139fb565b82525050565b60006060820190506146e6600083018661352d565b6146f360208301856146c2565b61470060408301846146c2565b949350505050565b600080fd5b600080fd5b600081519050614721816138e3565b92915050565b6000815190506147368161426b565b92915050565b60008151905061474b81614461565b92915050565b60008151905061476081613a0f565b92915050565b6000815190506147758161363b565b92915050565b60008151905061478a81613860565b92915050565b60006147a361479e846136ec565b6136d1565b9050828152602081018484840111156147bf576147be61366c565b5b6147ca848285613573565b509392505050565b600082601f8301126147e7576147e6613667565b5b81516147f7848260208601614790565b91505092915050565b6002811061480d57600080fd5b50565b60008151905061481f81614800565b92915050565b6000610160828403121561483c5761483b614708565b5b6148476101606136d1565b9050600061485784828501614712565b600083015250602061486b84828501614727565b602083015250604061487f8482850161473c565b604083015250606061489384828501614751565b60608301525060806148a784828501614751565b60808301525060a06148bb8482850161457d565b60a08301525060c06148cf84828501614766565b60c08301525060e06148e384828501614766565b60e0830152506101006148f88482850161477b565b6101008301525061012082015167ffffffffffffffff81111561491e5761491d61470d565b5b61492a848285016147d2565b6101208301525061014061494084828501614810565b6101408301525092915050565b60006020828403121561496357614962613492565b5b600082015167ffffffffffffffff81111561498157614980613497565b5b61498d84828501614825565b91505092915050565b60006149a28385613562565b93506149af83858461371d565b6149b88361359d565b840190509392505050565b6000819050919050565b60006149e86149e36149de846139fb565b6149c3565b6137f8565b9050919050565b6149f8816149cd565b82525050565b60006080820190508181036000830152614a19818789614996565b9050614a28602083018661382c565b614a35604083018561382c565b614a4260608301846149ef565b9695505050505050565b6000614a5b60208401846138fa565b905092915050565b6000614a726020840184614282565b905092915050565b6000614a896020840184614478565b905092915050565b6000614aa06020840184613a26565b905092915050565b6000614ab76020840184613966565b905092915050565b6000614ace6020840184613652565b905092915050565b6000614ae56020840184613877565b905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112614b1957614b18614af7565b5b83810192508235915060208301925067ffffffffffffffff821115614b4157614b40614aed565b5b600182023603831315614b5757614b56614af2565b5b509250929050565b6000614b6b8385613b5d565b9350614b7883858461371d565b614b818361359d565b840190509392505050565b600081359050614b9b81614800565b92915050565b6000614bb06020840184614b8c565b905092915050565b60006101608301614bcc6000840184614a4c565b614bd96000860182613ad7565b50614be76020840184614a63565b614bf46020860182613af3565b50614c026040840184614a7a565b614c0f6040860182613b12565b50614c1d6060840184614a91565b614c2a6060860182613b21565b50614c386080840184614a91565b614c456080860182613b21565b50614c5360a0840184614aa8565b614c6060a0860182613b30565b50614c6e60c0840184614abf565b614c7b60c0860182613b3f565b50614c8960e0840184614abf565b614c9660e0860182613b3f565b50614ca5610100840184614ad6565b614cb3610100860182613b4e565b50614cc2610120840184614afc565b858303610120870152614cd6838284614b5f565b92505050614ce8610140840184614ba1565b614cf6610140860182613c0f565b508091505092915050565b60006020820190508181036000830152614d1b8184614bb8565b905092915050565b7f4549503731323a20556e696e697469616c697a65640000000000000000000000600082015250565b6000614d59601583613562565b9150614d6482614d23565b602082019050919050565b60006020820190508181036000830152614d8881614d4c565b9050919050565b60006040820190508181036000830152614daa818587614996565b9050614db9602083018461352d565b949350505050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000614dec8385614dc1565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614e1f57614e1e614dd2565b5b602083029250614e30838584614dd7565b82840190509392505050565b600082825260208201905092915050565b6000614e598385614e3c565b9350614e6683858461371d565b614e6f8361359d565b840190509392505050565b60a08201614e8b6000830183614aa8565b614e986000850182613b30565b50614ea66020830183614aa8565b614eb36020850182613b30565b50614ec16040830183614aa8565b614ece6040850182613b30565b50614edc6060830183614aa8565b614ee96060850182613b30565b50614ef76080830183614abf565b614f046080850182613b3f565b50505050565b6000610100820190508181036000830152614f2681898b614996565b90508181036020830152614f3b818789614de0565b90508181036040830152614f50818587614e4d565b9050614f5f6060830184614e7a565b98975050505050505050565b60006020820190508181036000830152614f86818486614996565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614fc9826137f8565b9150614fd4836137f8565b9250828202614fe2816137f8565b91508282048414831517614ff957614ff8614f8f565b5b5092915050565b60006020828403121561501657615015613492565b5b600061502484828501614712565b91505092915050565b7f5472616e73666572204552433230206661696c65640000000000000000000000600082015250565b6000615063601583613562565b915061506e8261502d565b602082019050919050565b6000602082019050818103600083015261509281615056565b9050919050565b7f496e636f7272656374206e6174697665207061796d656e7420616d6f756e7400600082015250565b60006150cf601f83613562565b91506150da82615099565b602082019050919050565b600060208201905081810360008301526150fe816150c2565b9050919050565b61510e81613ae6565b82525050565b6000604082019050818103600083015261512f818587614996565b905061513e6020830184615105565b949350505050565b600080fd5b600080fd5b600080fd5b60008235600160800383360303811261517157615170615146565b5b80830191505092915050565b6000813561518a8161363b565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6151c084615193565b9350801983169250808416831791505092915050565b60006151f16151ec6151e784613609565b6149c3565b613609565b9050919050565b6000615203826151d6565b9050919050565b6000615215826151f8565b9050919050565b6000819050919050565b61522f8261520a565b61524261523b8261521c565b83546151a0565b8255505050565b6000808335600160200384360303811261526657615265615146565b5b80840192508235915067ffffffffffffffff8211156152885761528761514b565b5b6020830192506020820236038313156152a4576152a3615150565b5b509250929050565b600081549050919050565b60008190506001806001038301049050919050565b60008190508160005260206000209050919050565b600082821b905092915050565b60006008830261531e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826152e1565b61532886836152e1565b95508019841693508086168417925050509392505050565b600061535b615356615351846137f8565b6149c3565b6137f8565b9050919050565b6000819050919050565b61537583615340565b61538961538182615362565b8484546152ee565b825550505050565b600090565b61539e615391565b6153a981848461536c565b505050565b5b818110156153cd576153c2600082615396565b6001810190506153af565b5050565b600082821c905092915050565b81831015615417576153ef826152b7565b6153f8846152b7565b615401836152cc565b81810183820161541181836153ae565b50505050505b505050565b6801000000000000000082111561543657615435613671565b5b61543f816152ac565b82825561544d8382846153de565b505050565b600082905092915050565b6000813561546a8161394f565b80915050919050565b6000819050919050565b6154878383615452565b67ffffffffffffffff8111156154a05761549f613671565b5b6154aa818361541c565b6154b383615473565b6154bc836152cc565b6001830460005b818110156154fb5760006154d68561545d565b6154df81615362565b80925060208701965050508082850155506001810190506154c3565b5050505050505050565b61551083838361547d565b505050565b6000808335600160200384360303811261553257615531615146565b5b80840192508235915067ffffffffffffffff8211156155545761555361514b565b5b6020830192506020820236038313156155705761556f615150565b5b509250929050565b600081549050919050565b60008190506001806001038301049050919050565b60008190508160005260206000209050919050565b5b818110156155cc576155c1600082615396565b6001810190506155ae565b5050565b81831015615609576155e182615583565b6155ea84615583565b6155f383615598565b81810183820161560381836155ad565b50505050505b505050565b6801000000000000000082111561562857615627613671565b5b61563181615578565b82825561563f8382846155d0565b505050565b600082905092915050565b6000819050919050565b6156638383615644565b67ffffffffffffffff81111561567c5761567b613671565b5b615686818361560e565b61568f8361564f565b61569883615598565b6001830460005b818110156156d75760006156b28561517d565b6156bb8161521c565b809250602087019650505080828501555060018101905061569f565b5050505050505050565b6156ec838383615659565b505050565b6000810160008301806157038161517d565b905061570f8184615226565b50505060018101602083016157248185615249565b61572f818386615505565b5050505060028101604083016157458185615515565b6157508183866156e1565b5050505060038101606083016157668185615249565b615771818386615505565b505050505050565b61578382826156f1565b5050565b600080833560016020038436030381126157a4576157a3615146565b5b80840192508235915067ffffffffffffffff8211156157c6576157c561514b565b5b6020830192506001820236038313156157e2576157e1615150565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b5b818110156158395761582e600082615396565b60018101905061581b565b5050565b601f82111561587e5761584f816157f5565b6158588461580a565b81016020851015615867578190505b61587b6158738561580a565b83018261581a565b50505b505050565b6000615894600019846008026153d1565b1980831691505092915050565b60006158ad8383615883565b9150826002028217905092915050565b6158c783836157ea565b67ffffffffffffffff8111156158e0576158df613671565b5b6158ea825461451c565b6158f582828561583d565b6000601f8311600181146159245760008415615912578287013590505b61591c85826158a1565b865550615984565b601f198416615932866157f5565b60005b8281101561595a57848901358255600182019150602085019450602081019050615935565b868310156159775784890135615973601f891682615883565b8355505b6001600288020188555050505b50505050505050565b6000819050919050565b60006159b26159ad6159a88461598d565b6149c3565b6139fb565b9050919050565b6159c281615997565b82525050565b60006020820190506159dd60008301846159b9565b92915050565b60006159ee826137f8565b91506159f9836137f8565b9250828203905081811115615a1157615a10614f8f565b5b92915050565b6000615a22826137f8565b9150615a2d836137f8565b9250828201905080821115615a4557615a44614f8f565b5b92915050565b60006060820190508181036000830152615a66818688614996565b9050615a7560208301856146c2565b615a8260408301846146c2565b95945050505050565b615a9481613b02565b82525050565b60006040820190508181036000830152615ab5818587614996565b9050615ac46020830184615a8b565b949350505050565b6000604082019050615ae1600083018561382c565b615aee6020830184613802565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050615b39600083018561382c565b615b4660208301846138b9565b9392505050565b6000819050919050565b615b68615b63826137f8565b615b4d565b82525050565b60008160601b9050919050565b6000615b8682615b6e565b9050919050565b6000615b9882615b7b565b9050919050565b615bb0615bab82613629565b615b8d565b82525050565b6000615bc28286615b57565b602082019150615bd28285615b57565b602082019150615be28284615b9f565b601482019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615c2d826137f8565b9150615c38836137f8565b925082615c4857615c47615bf3565b5b828206905092915050565b6000615c5e826137f8565b915060008203615c7157615c70614f8f565b5b600182039050919050565b6000606082019050615c916000830186613802565b615c9e602083018561382c565b615cab6040830184613802565b949350505050565b600060208284031215615cc957615cc8613492565b5b6000615cd784828501614766565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000615d188383613b3f565b60208301905092915050565b6000602082019050919050565b6000615d3c82615ce0565b615d468185615ceb565b9350615d5183615cfc565b8060005b83811015615d82578151615d698882615d0c565b9750615d7483615d24565b925050600181019050615d55565b5085935050505092915050565b600081519050919050565b6000615da582615d8f565b615daf8185614e3c565b9350615dbf818560208601613573565b615dc88161359d565b840191505092915050565b600061010082019050615de9600083018b61382c565b8181036020830152615dfb818a615d31565b90508181036040830152615e0f8189613f6b565b9050615e1e606083018861382c565b8181036080830152615e308187615d9a565b9050615e3f60a0830186613802565b615e4c60c0830185615a8b565b615e5960e0830184615a8b565b9998505050505050505050565b615e6f82613557565b67ffffffffffffffff811115615e8857615e87613671565b5b615e92825461451c565b615e9d82828561583d565b600060209050601f831160018114615ed05760008415615ebe578287015190505b615ec885826158a1565b865550615f30565b601f198416615ede866157f5565b60005b82811015615f0657848901518255600182019150602085019450602081019050615ee1565b86831015615f235784890151615f1f601f891682615883565b8355505b6001600288020188555050505b50505050505056fea26469706673582212201316dfe0e81987e3fdbd4f70a340f650890b034be886554b8a327e700f63e34464736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NFTMinted(address,uint256,address)": {
        "params": {
          "ipId": "The ID of the NFT IP.",
          "recipient": "The address of the recipient of the NFT.",
          "tokenId": "The token ID of the minted NFT."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "mint(string,bytes,bytes32[],(uint256,uint256,uint256,uint256,address))": {
        "params": {
          "mintparams": "The mint parameter signer sign the caller's address (msg.sender) for this `mint` function.",
          "proof": "The proof for the leaf of the allowlist in a stage if mint type is Allowlist.",
          "signature": "The signature from the whitelist signer. This signautre is genreated by having the whitelist",
          "stage": "Identification of the stage"
        },
        "returns": {
          "ipId": "The ID of the NFT IP.",
          "tokenId": "The token ID of the minted NFT."
        }
      },
      "mintRecord(address,string)": {
        "params": {
          "stage": "The stage name",
          "to": "Inquiry address"
        }
      },
      "preMint(address,uint256)": {
        "params": {
          "to": "The recipient of the minted NFT.",
          "tokenId_": "The token ID of the minted NFT."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setActiveSigner(address,bool)": {
        "params": {
          "signer": "Signer address.",
          "status": "Effective status."
        }
      },
      "setContracts(address,address)": {
        "params": {
          "multiRoundContract": "The new MultiRound contract address.",
          "nftContract": "The new NFT contract address."
        }
      },
      "setMaxSupply(uint256)": {
        "params": {
          "newMaxSupply": "The new maximum number of nfts that can be minted."
        }
      },
      "setPreMintedCount(uint256)": {
        "params": {
          "count": "The number of pre-minted NFTs"
        }
      },
      "setSigner(address)": {
        "params": {
          "signer_": "The new whitelist signer address."
        }
      },
      "setStageEnableSig(string,bool)": {
        "params": {
          "enableSig": "Whether to enable (true, false).",
          "stage": "Round identification."
        }
      },
      "setStageMaxSupply(string,uint32)": {
        "params": {
          "maxSupply_": "nft maximum supply.",
          "stage": "Round identification."
        }
      },
      "setStageMintInfo((bool,uint8,uint32,uint64,uint64,uint256,address,address,bytes32,string,uint8))": {
        "params": {
          "stageMintInfo": "The mint information for the stage."
        }
      },
      "setStageMintLimitationPerAddress(string,uint8)": {
        "params": {
          "mintLimitationPerAddress": "Single address mint limit.",
          "stage": "Round identification."
        }
      },
      "setStageMintTime(string,uint64,uint64)": {
        "params": {
          "endTime": "The end time of the stage.",
          "stage": "Round identification.",
          "startTime": "The start time of the stage."
        }
      },
      "setStagePayment(string,address,address,uint64)": {
        "params": {
          "payeeAddress": "Payment address.",
          "paymentToken": "Token contract address for payment (if 0, it is a native token).",
          "price": "Single nft price.",
          "stage": "Round identification."
        }
      },
      "setTransferRestricted(bool,uint64,uint64)": {
        "params": {
          "endTime": "End time.",
          "isTransferRestricted_": "Whether to restrict transfer.",
          "startTime": "Start time."
        }
      },
      "stageToMint(string)": {
        "params": {
          "stage": "The stage name"
        }
      },
      "stageToTotalSupply(string)": {
        "params": {
          "stage": "The stage name"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NFTMinted(address,uint256,address)": {
        "notice": "Emitted when a NFT is minted."
      }
    },
    "kind": "user",
    "methods": {
      "CORE_METADATA_MODULE()": {
        "notice": "The Core Metadata Module contract address."
      },
      "IP_ASSET_REGISTRY()": {
        "notice": "The IP Asset Registry contract address."
      },
      "LICENSING_MODULE()": {
        "notice": "The Licensing Module contract address."
      },
      "MULTIROUND_CONTRACT()": {
        "notice": "We need a MultiRound contract to manage rounds"
      },
      "NFT_CONTRACT()": {
        "notice": "We need a NFT contract to mint NFTs"
      },
      "PIL_TEMPLATE()": {
        "notice": "Story Proof-of-Creativity PILicense Template address."
      },
      "ipMetadataURI()": {
        "notice": "IP information"
      },
      "lastMintedTokenId()": {
        "notice": "Last minted token ID"
      },
      "maxSupply()": {
        "notice": "Query the maximum number of nfts that can be minted"
      },
      "mint(string,bytes,bytes32[],(uint256,uint256,uint256,uint256,address))": {
        "notice": "Mints a NFT for the given recipient, registers it as an IP,         and makes it a derivative of the organization IP."
      },
      "mintRecord(address,string)": {
        "notice": "Query the quantity that has been minted at a certain stage at a certain address"
      },
      "preMint(address,uint256)": {
        "notice": "Pre-Mints a NFT with specified tokenID for the given recipient, registers it as an IP,         and makes it a derivative of the organization IP."
      },
      "preMintedCount()": {
        "notice": "Number of pre-minted NFTs"
      },
      "rootNFT()": {
        "notice": "Root NFT"
      },
      "setActiveSigner(address,bool)": {
        "notice": "Set a valid signer address.     If the address has been configured, it is a modify function.abi     If the address has not been configured, then it is and add function to configure the address."
      },
      "setContracts(address,address)": {
        "notice": "Updates the MULTIROUND_CONTRACT and the NFT_CONTRACT addresses."
      },
      "setMaxSupply(uint256)": {
        "notice": "Configure or update the maximum number of nfts that can be minted."
      },
      "setPreMintedCount(uint256)": {
        "notice": "Set number of pre-minted NFTs"
      },
      "setSigner(address)": {
        "notice": "Updates the whitelist signer."
      },
      "setStageEnableSig(string,bool)": {
        "notice": "Set whether server level signing is enabled for a specific round according to the stage"
      },
      "setStageMaxSupply(string,uint32)": {
        "notice": "According to the stage, set the maximum nft supply for a specific round."
      },
      "setStageMintInfo((bool,uint8,uint32,uint64,uint64,uint256,address,address,bytes32,string,uint8))": {
        "notice": "Configure or update the information of a certain round according to the stage"
      },
      "setStageMintLimitationPerAddress(string,uint8)": {
        "notice": "Set the upper limit of the number of mints per address for a specific round according to the stage"
      },
      "setStageMintTime(string,uint64,uint64)": {
        "notice": "Configure or update the mint time for a specific stage."
      },
      "setStagePayment(string,address,address,uint64)": {
        "notice": "Set payment information for a specific round based on the stage"
      },
      "setTransferRestricted(bool,uint64,uint64)": {
        "notice": "Set whether to restrict transfer, if configured to true, transfer is not allowed.     Otherwise, transfer is allowed."
      },
      "stageToMint(string)": {
        "notice": "Query configuration information for a specific stage"
      },
      "stageToTotalSupply(string)": {
        "notice": "Query the total number of minted under the current stage"
      },
      "totalSupply()": {
        "notice": "Query the total mint quantity"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6548,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "NFT_CONTRACT",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6551,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "MULTIROUND_CONTRACT",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6554,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "PIL_TEMPLATE",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6557,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "IP_ASSET_REGISTRY",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6560,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "CORE_METADATA_MODULE",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6563,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "LICENSING_MODULE",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6567,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "rootNFT",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(RootNFT)7573_storage"
      },
      {
        "astId": 6570,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "ipMetadataURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 6572,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "ipMetadataHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 6576,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "remainingTokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6579,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "remainingTokenIdCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6582,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "preMintedCount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6585,
        "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
        "label": "lastMintedTokenId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RootNFT)7573_storage": {
        "encoding": "inplace",
        "label": "struct IMimbokuMultiround.RootNFT",
        "members": [
          {
            "astId": 7563,
            "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7566,
            "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 7569,
            "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
            "label": "ipIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7572,
            "contract": "contracts/MimbokuMultiround.sol:MimbokuMultiround",
            "label": "licenseTermsIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}